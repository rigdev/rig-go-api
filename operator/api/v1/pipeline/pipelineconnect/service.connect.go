// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operator/api/v1/pipeline/service.proto

package pipelineconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pipeline "github.com/rigdev/rig-go-api/operator/api/v1/pipeline"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.pipeline.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceWatchObjectStatusProcedure is the fully-qualified name of the Service's WatchObjectStatus
	// RPC.
	ServiceWatchObjectStatusProcedure = "/api.v1.pipeline.Service/WatchObjectStatus"
	// ServiceDryRunProcedure is the fully-qualified name of the Service's DryRun RPC.
	ServiceDryRunProcedure = "/api.v1.pipeline.Service/DryRun"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor                 = pipeline.File_operator_api_v1_pipeline_service_proto.Services().ByName("Service")
	serviceWatchObjectStatusMethodDescriptor = serviceServiceDescriptor.Methods().ByName("WatchObjectStatus")
	serviceDryRunMethodDescriptor            = serviceServiceDescriptor.Methods().ByName("DryRun")
)

// ServiceClient is a client for the api.v1.pipeline.Service service.
type ServiceClient interface {
	WatchObjectStatus(context.Context, *connect.Request[pipeline.WatchObjectStatusRequest]) (*connect.ServerStreamForClient[pipeline.WatchObjectStatusResponse], error)
	DryRun(context.Context, *connect.Request[pipeline.DryRunRequest]) (*connect.Response[pipeline.DryRunResponse], error)
}

// NewServiceClient constructs a client for the api.v1.pipeline.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		watchObjectStatus: connect.NewClient[pipeline.WatchObjectStatusRequest, pipeline.WatchObjectStatusResponse](
			httpClient,
			baseURL+ServiceWatchObjectStatusProcedure,
			connect.WithSchema(serviceWatchObjectStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dryRun: connect.NewClient[pipeline.DryRunRequest, pipeline.DryRunResponse](
			httpClient,
			baseURL+ServiceDryRunProcedure,
			connect.WithSchema(serviceDryRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	watchObjectStatus *connect.Client[pipeline.WatchObjectStatusRequest, pipeline.WatchObjectStatusResponse]
	dryRun            *connect.Client[pipeline.DryRunRequest, pipeline.DryRunResponse]
}

// WatchObjectStatus calls api.v1.pipeline.Service.WatchObjectStatus.
func (c *serviceClient) WatchObjectStatus(ctx context.Context, req *connect.Request[pipeline.WatchObjectStatusRequest]) (*connect.ServerStreamForClient[pipeline.WatchObjectStatusResponse], error) {
	return c.watchObjectStatus.CallServerStream(ctx, req)
}

// DryRun calls api.v1.pipeline.Service.DryRun.
func (c *serviceClient) DryRun(ctx context.Context, req *connect.Request[pipeline.DryRunRequest]) (*connect.Response[pipeline.DryRunResponse], error) {
	return c.dryRun.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.pipeline.Service service.
type ServiceHandler interface {
	WatchObjectStatus(context.Context, *connect.Request[pipeline.WatchObjectStatusRequest], *connect.ServerStream[pipeline.WatchObjectStatusResponse]) error
	DryRun(context.Context, *connect.Request[pipeline.DryRunRequest]) (*connect.Response[pipeline.DryRunResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceWatchObjectStatusHandler := connect.NewServerStreamHandler(
		ServiceWatchObjectStatusProcedure,
		svc.WatchObjectStatus,
		connect.WithSchema(serviceWatchObjectStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDryRunHandler := connect.NewUnaryHandler(
		ServiceDryRunProcedure,
		svc.DryRun,
		connect.WithSchema(serviceDryRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.pipeline.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceWatchObjectStatusProcedure:
			serviceWatchObjectStatusHandler.ServeHTTP(w, r)
		case ServiceDryRunProcedure:
			serviceDryRunHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) WatchObjectStatus(context.Context, *connect.Request[pipeline.WatchObjectStatusRequest], *connect.ServerStream[pipeline.WatchObjectStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.pipeline.Service.WatchObjectStatus is not implemented"))
}

func (UnimplementedServiceHandler) DryRun(context.Context, *connect.Request[pipeline.DryRunRequest]) (*connect.Response[pipeline.DryRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.pipeline.Service.DryRun is not implemented"))
}
