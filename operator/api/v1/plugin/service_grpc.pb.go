// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	RunCapsule(ctx context.Context, in *RunCapsuleRequest, opts ...grpc.CallOption) (*RunCapsuleResponse, error)
	WatchObjectStatus(ctx context.Context, in *WatchObjectStatusRequest, opts ...grpc.CallOption) (PluginService_WatchObjectStatusClient, error)
	ComputeConfig(ctx context.Context, in *ComputeConfigRequest, opts ...grpc.CallOption) (*ComputeConfigResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.PluginService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) RunCapsule(ctx context.Context, in *RunCapsuleRequest, opts ...grpc.CallOption) (*RunCapsuleResponse, error) {
	out := new(RunCapsuleResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.PluginService/RunCapsule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) WatchObjectStatus(ctx context.Context, in *WatchObjectStatusRequest, opts ...grpc.CallOption) (PluginService_WatchObjectStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginService_ServiceDesc.Streams[0], "/api.v1.plugin.PluginService/WatchObjectStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginServiceWatchObjectStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PluginService_WatchObjectStatusClient interface {
	Recv() (*WatchObjectStatusResponse, error)
	grpc.ClientStream
}

type pluginServiceWatchObjectStatusClient struct {
	grpc.ClientStream
}

func (x *pluginServiceWatchObjectStatusClient) Recv() (*WatchObjectStatusResponse, error) {
	m := new(WatchObjectStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginServiceClient) ComputeConfig(ctx context.Context, in *ComputeConfigRequest, opts ...grpc.CallOption) (*ComputeConfigResponse, error) {
	out := new(ComputeConfigResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.PluginService/ComputeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	RunCapsule(context.Context, *RunCapsuleRequest) (*RunCapsuleResponse, error)
	WatchObjectStatus(*WatchObjectStatusRequest, PluginService_WatchObjectStatusServer) error
	ComputeConfig(context.Context, *ComputeConfigRequest) (*ComputeConfigResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedPluginServiceServer) RunCapsule(context.Context, *RunCapsuleRequest) (*RunCapsuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCapsule not implemented")
}
func (UnimplementedPluginServiceServer) WatchObjectStatus(*WatchObjectStatusRequest, PluginService_WatchObjectStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchObjectStatus not implemented")
}
func (UnimplementedPluginServiceServer) ComputeConfig(context.Context, *ComputeConfigRequest) (*ComputeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeConfig not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.PluginService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_RunCapsule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCapsuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).RunCapsule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.PluginService/RunCapsule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).RunCapsule(ctx, req.(*RunCapsuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_WatchObjectStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchObjectStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServiceServer).WatchObjectStatus(m, &pluginServiceWatchObjectStatusServer{stream})
}

type PluginService_WatchObjectStatusServer interface {
	Send(*WatchObjectStatusResponse) error
	grpc.ServerStream
}

type pluginServiceWatchObjectStatusServer struct {
	grpc.ServerStream
}

func (x *pluginServiceWatchObjectStatusServer) Send(m *WatchObjectStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PluginService_ComputeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ComputeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.PluginService/ComputeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ComputeConfig(ctx, req.(*ComputeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.plugin.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _PluginService_Initialize_Handler,
		},
		{
			MethodName: "RunCapsule",
			Handler:    _PluginService_RunCapsule_Handler,
		},
		{
			MethodName: "ComputeConfig",
			Handler:    _PluginService_ComputeConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchObjectStatus",
			Handler:       _PluginService_WatchObjectStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "operator/api/v1/plugin/service.proto",
}

// RequestServiceClient is the client API for RequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestServiceClient interface {
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	SetObject(ctx context.Context, in *SetObjectRequest, opts ...grpc.CallOption) (*SetObjectResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	MarkUsedObject(ctx context.Context, in *MarkUsedObjectRequest, opts ...grpc.CallOption) (*MarkUsedObjectResponse, error)
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
}

type requestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestServiceClient(cc grpc.ClientConnInterface) RequestServiceClient {
	return &requestServiceClient{cc}
}

func (c *requestServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.RequestService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) SetObject(ctx context.Context, in *SetObjectRequest, opts ...grpc.CallOption) (*SetObjectResponse, error) {
	out := new(SetObjectResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.RequestService/SetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.RequestService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) MarkUsedObject(ctx context.Context, in *MarkUsedObjectRequest, opts ...grpc.CallOption) (*MarkUsedObjectResponse, error) {
	out := new(MarkUsedObjectResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.RequestService/MarkUsedObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.plugin.RequestService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServiceServer is the server API for RequestService service.
// All implementations must embed UnimplementedRequestServiceServer
// for forward compatibility
type RequestServiceServer interface {
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	SetObject(context.Context, *SetObjectRequest) (*SetObjectResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	MarkUsedObject(context.Context, *MarkUsedObjectRequest) (*MarkUsedObjectResponse, error)
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	mustEmbedUnimplementedRequestServiceServer()
}

// UnimplementedRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequestServiceServer struct {
}

func (UnimplementedRequestServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedRequestServiceServer) SetObject(context.Context, *SetObjectRequest) (*SetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObject not implemented")
}
func (UnimplementedRequestServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedRequestServiceServer) MarkUsedObject(context.Context, *MarkUsedObjectRequest) (*MarkUsedObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkUsedObject not implemented")
}
func (UnimplementedRequestServiceServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedRequestServiceServer) mustEmbedUnimplementedRequestServiceServer() {}

// UnsafeRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServiceServer will
// result in compilation errors.
type UnsafeRequestServiceServer interface {
	mustEmbedUnimplementedRequestServiceServer()
}

func RegisterRequestServiceServer(s grpc.ServiceRegistrar, srv RequestServiceServer) {
	s.RegisterService(&RequestService_ServiceDesc, srv)
}

func _RequestService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.RequestService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_SetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).SetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.RequestService/SetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).SetObject(ctx, req.(*SetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.RequestService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_MarkUsedObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkUsedObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).MarkUsedObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.RequestService/MarkUsedObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).MarkUsedObject(ctx, req.(*MarkUsedObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.plugin.RequestService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestService_ServiceDesc is the grpc.ServiceDesc for RequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.plugin.RequestService",
	HandlerType: (*RequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObject",
			Handler:    _RequestService_GetObject_Handler,
		},
		{
			MethodName: "SetObject",
			Handler:    _RequestService_SetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _RequestService_DeleteObject_Handler,
		},
		{
			MethodName: "MarkUsedObject",
			Handler:    _RequestService_MarkUsedObject_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _RequestService_ListObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operator/api/v1/plugin/service.proto",
}
