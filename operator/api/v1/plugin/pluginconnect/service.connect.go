// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operator/api/v1/plugin/service.proto

package pluginconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	plugin "github.com/rigdev/rig-go-api/operator/api/v1/plugin"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PluginServiceName is the fully-qualified name of the PluginService service.
	PluginServiceName = "api.v1.plugin.PluginService"
	// RequestServiceName is the fully-qualified name of the RequestService service.
	RequestServiceName = "api.v1.plugin.RequestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PluginServiceInitializeProcedure is the fully-qualified name of the PluginService's Initialize
	// RPC.
	PluginServiceInitializeProcedure = "/api.v1.plugin.PluginService/Initialize"
	// PluginServiceRunCapsuleProcedure is the fully-qualified name of the PluginService's RunCapsule
	// RPC.
	PluginServiceRunCapsuleProcedure = "/api.v1.plugin.PluginService/RunCapsule"
	// RequestServiceGetObjectProcedure is the fully-qualified name of the RequestService's GetObject
	// RPC.
	RequestServiceGetObjectProcedure = "/api.v1.plugin.RequestService/GetObject"
	// RequestServiceSetObjectProcedure is the fully-qualified name of the RequestService's SetObject
	// RPC.
	RequestServiceSetObjectProcedure = "/api.v1.plugin.RequestService/SetObject"
	// RequestServiceDeleteObjectProcedure is the fully-qualified name of the RequestService's
	// DeleteObject RPC.
	RequestServiceDeleteObjectProcedure = "/api.v1.plugin.RequestService/DeleteObject"
	// RequestServiceMarkUsedObjectProcedure is the fully-qualified name of the RequestService's
	// MarkUsedObject RPC.
	RequestServiceMarkUsedObjectProcedure = "/api.v1.plugin.RequestService/MarkUsedObject"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pluginServiceServiceDescriptor               = plugin.File_operator_api_v1_plugin_service_proto.Services().ByName("PluginService")
	pluginServiceInitializeMethodDescriptor      = pluginServiceServiceDescriptor.Methods().ByName("Initialize")
	pluginServiceRunCapsuleMethodDescriptor      = pluginServiceServiceDescriptor.Methods().ByName("RunCapsule")
	requestServiceServiceDescriptor              = plugin.File_operator_api_v1_plugin_service_proto.Services().ByName("RequestService")
	requestServiceGetObjectMethodDescriptor      = requestServiceServiceDescriptor.Methods().ByName("GetObject")
	requestServiceSetObjectMethodDescriptor      = requestServiceServiceDescriptor.Methods().ByName("SetObject")
	requestServiceDeleteObjectMethodDescriptor   = requestServiceServiceDescriptor.Methods().ByName("DeleteObject")
	requestServiceMarkUsedObjectMethodDescriptor = requestServiceServiceDescriptor.Methods().ByName("MarkUsedObject")
)

// PluginServiceClient is a client for the api.v1.plugin.PluginService service.
type PluginServiceClient interface {
	Initialize(context.Context, *connect.Request[plugin.InitializeRequest]) (*connect.Response[plugin.InitializeResponse], error)
	RunCapsule(context.Context, *connect.Request[plugin.RunCapsuleRequest]) (*connect.Response[plugin.RunCapsuleResponse], error)
}

// NewPluginServiceClient constructs a client for the api.v1.plugin.PluginService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPluginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PluginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pluginServiceClient{
		initialize: connect.NewClient[plugin.InitializeRequest, plugin.InitializeResponse](
			httpClient,
			baseURL+PluginServiceInitializeProcedure,
			connect.WithSchema(pluginServiceInitializeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		runCapsule: connect.NewClient[plugin.RunCapsuleRequest, plugin.RunCapsuleResponse](
			httpClient,
			baseURL+PluginServiceRunCapsuleProcedure,
			connect.WithSchema(pluginServiceRunCapsuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pluginServiceClient implements PluginServiceClient.
type pluginServiceClient struct {
	initialize *connect.Client[plugin.InitializeRequest, plugin.InitializeResponse]
	runCapsule *connect.Client[plugin.RunCapsuleRequest, plugin.RunCapsuleResponse]
}

// Initialize calls api.v1.plugin.PluginService.Initialize.
func (c *pluginServiceClient) Initialize(ctx context.Context, req *connect.Request[plugin.InitializeRequest]) (*connect.Response[plugin.InitializeResponse], error) {
	return c.initialize.CallUnary(ctx, req)
}

// RunCapsule calls api.v1.plugin.PluginService.RunCapsule.
func (c *pluginServiceClient) RunCapsule(ctx context.Context, req *connect.Request[plugin.RunCapsuleRequest]) (*connect.Response[plugin.RunCapsuleResponse], error) {
	return c.runCapsule.CallUnary(ctx, req)
}

// PluginServiceHandler is an implementation of the api.v1.plugin.PluginService service.
type PluginServiceHandler interface {
	Initialize(context.Context, *connect.Request[plugin.InitializeRequest]) (*connect.Response[plugin.InitializeResponse], error)
	RunCapsule(context.Context, *connect.Request[plugin.RunCapsuleRequest]) (*connect.Response[plugin.RunCapsuleResponse], error)
}

// NewPluginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPluginServiceHandler(svc PluginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pluginServiceInitializeHandler := connect.NewUnaryHandler(
		PluginServiceInitializeProcedure,
		svc.Initialize,
		connect.WithSchema(pluginServiceInitializeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pluginServiceRunCapsuleHandler := connect.NewUnaryHandler(
		PluginServiceRunCapsuleProcedure,
		svc.RunCapsule,
		connect.WithSchema(pluginServiceRunCapsuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.plugin.PluginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PluginServiceInitializeProcedure:
			pluginServiceInitializeHandler.ServeHTTP(w, r)
		case PluginServiceRunCapsuleProcedure:
			pluginServiceRunCapsuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPluginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPluginServiceHandler struct{}

func (UnimplementedPluginServiceHandler) Initialize(context.Context, *connect.Request[plugin.InitializeRequest]) (*connect.Response[plugin.InitializeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.plugin.PluginService.Initialize is not implemented"))
}

func (UnimplementedPluginServiceHandler) RunCapsule(context.Context, *connect.Request[plugin.RunCapsuleRequest]) (*connect.Response[plugin.RunCapsuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.plugin.PluginService.RunCapsule is not implemented"))
}

// RequestServiceClient is a client for the api.v1.plugin.RequestService service.
type RequestServiceClient interface {
	GetObject(context.Context, *connect.Request[plugin.GetObjectRequest]) (*connect.Response[plugin.GetObjectResponse], error)
	SetObject(context.Context, *connect.Request[plugin.SetObjectRequest]) (*connect.Response[plugin.SetObjectResponse], error)
	DeleteObject(context.Context, *connect.Request[plugin.DeleteObjectRequest]) (*connect.Response[plugin.DeleteObjectResponse], error)
	MarkUsedObject(context.Context, *connect.Request[plugin.MarkUsedObjectRequest]) (*connect.Response[plugin.MarkUsedObjectResponse], error)
}

// NewRequestServiceClient constructs a client for the api.v1.plugin.RequestService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRequestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RequestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &requestServiceClient{
		getObject: connect.NewClient[plugin.GetObjectRequest, plugin.GetObjectResponse](
			httpClient,
			baseURL+RequestServiceGetObjectProcedure,
			connect.WithSchema(requestServiceGetObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setObject: connect.NewClient[plugin.SetObjectRequest, plugin.SetObjectResponse](
			httpClient,
			baseURL+RequestServiceSetObjectProcedure,
			connect.WithSchema(requestServiceSetObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObject: connect.NewClient[plugin.DeleteObjectRequest, plugin.DeleteObjectResponse](
			httpClient,
			baseURL+RequestServiceDeleteObjectProcedure,
			connect.WithSchema(requestServiceDeleteObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		markUsedObject: connect.NewClient[plugin.MarkUsedObjectRequest, plugin.MarkUsedObjectResponse](
			httpClient,
			baseURL+RequestServiceMarkUsedObjectProcedure,
			connect.WithSchema(requestServiceMarkUsedObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// requestServiceClient implements RequestServiceClient.
type requestServiceClient struct {
	getObject      *connect.Client[plugin.GetObjectRequest, plugin.GetObjectResponse]
	setObject      *connect.Client[plugin.SetObjectRequest, plugin.SetObjectResponse]
	deleteObject   *connect.Client[plugin.DeleteObjectRequest, plugin.DeleteObjectResponse]
	markUsedObject *connect.Client[plugin.MarkUsedObjectRequest, plugin.MarkUsedObjectResponse]
}

// GetObject calls api.v1.plugin.RequestService.GetObject.
func (c *requestServiceClient) GetObject(ctx context.Context, req *connect.Request[plugin.GetObjectRequest]) (*connect.Response[plugin.GetObjectResponse], error) {
	return c.getObject.CallUnary(ctx, req)
}

// SetObject calls api.v1.plugin.RequestService.SetObject.
func (c *requestServiceClient) SetObject(ctx context.Context, req *connect.Request[plugin.SetObjectRequest]) (*connect.Response[plugin.SetObjectResponse], error) {
	return c.setObject.CallUnary(ctx, req)
}

// DeleteObject calls api.v1.plugin.RequestService.DeleteObject.
func (c *requestServiceClient) DeleteObject(ctx context.Context, req *connect.Request[plugin.DeleteObjectRequest]) (*connect.Response[plugin.DeleteObjectResponse], error) {
	return c.deleteObject.CallUnary(ctx, req)
}

// MarkUsedObject calls api.v1.plugin.RequestService.MarkUsedObject.
func (c *requestServiceClient) MarkUsedObject(ctx context.Context, req *connect.Request[plugin.MarkUsedObjectRequest]) (*connect.Response[plugin.MarkUsedObjectResponse], error) {
	return c.markUsedObject.CallUnary(ctx, req)
}

// RequestServiceHandler is an implementation of the api.v1.plugin.RequestService service.
type RequestServiceHandler interface {
	GetObject(context.Context, *connect.Request[plugin.GetObjectRequest]) (*connect.Response[plugin.GetObjectResponse], error)
	SetObject(context.Context, *connect.Request[plugin.SetObjectRequest]) (*connect.Response[plugin.SetObjectResponse], error)
	DeleteObject(context.Context, *connect.Request[plugin.DeleteObjectRequest]) (*connect.Response[plugin.DeleteObjectResponse], error)
	MarkUsedObject(context.Context, *connect.Request[plugin.MarkUsedObjectRequest]) (*connect.Response[plugin.MarkUsedObjectResponse], error)
}

// NewRequestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRequestServiceHandler(svc RequestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	requestServiceGetObjectHandler := connect.NewUnaryHandler(
		RequestServiceGetObjectProcedure,
		svc.GetObject,
		connect.WithSchema(requestServiceGetObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	requestServiceSetObjectHandler := connect.NewUnaryHandler(
		RequestServiceSetObjectProcedure,
		svc.SetObject,
		connect.WithSchema(requestServiceSetObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	requestServiceDeleteObjectHandler := connect.NewUnaryHandler(
		RequestServiceDeleteObjectProcedure,
		svc.DeleteObject,
		connect.WithSchema(requestServiceDeleteObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	requestServiceMarkUsedObjectHandler := connect.NewUnaryHandler(
		RequestServiceMarkUsedObjectProcedure,
		svc.MarkUsedObject,
		connect.WithSchema(requestServiceMarkUsedObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.plugin.RequestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RequestServiceGetObjectProcedure:
			requestServiceGetObjectHandler.ServeHTTP(w, r)
		case RequestServiceSetObjectProcedure:
			requestServiceSetObjectHandler.ServeHTTP(w, r)
		case RequestServiceDeleteObjectProcedure:
			requestServiceDeleteObjectHandler.ServeHTTP(w, r)
		case RequestServiceMarkUsedObjectProcedure:
			requestServiceMarkUsedObjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRequestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRequestServiceHandler struct{}

func (UnimplementedRequestServiceHandler) GetObject(context.Context, *connect.Request[plugin.GetObjectRequest]) (*connect.Response[plugin.GetObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.plugin.RequestService.GetObject is not implemented"))
}

func (UnimplementedRequestServiceHandler) SetObject(context.Context, *connect.Request[plugin.SetObjectRequest]) (*connect.Response[plugin.SetObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.plugin.RequestService.SetObject is not implemented"))
}

func (UnimplementedRequestServiceHandler) DeleteObject(context.Context, *connect.Request[plugin.DeleteObjectRequest]) (*connect.Response[plugin.DeleteObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.plugin.RequestService.DeleteObject is not implemented"))
}

func (UnimplementedRequestServiceHandler) MarkUsedObject(context.Context, *connect.Request[plugin.MarkUsedObjectRequest]) (*connect.Response[plugin.MarkUsedObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.plugin.RequestService.MarkUsedObject is not implemented"))
}
