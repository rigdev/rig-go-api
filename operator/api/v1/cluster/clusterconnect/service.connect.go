// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operator/api/v1/cluster/service.proto

package clusterconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	cluster "github.com/rigdev/rig-go-api/operator/api/v1/cluster"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.operator.cluster.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceGetNodesProcedure is the fully-qualified name of the Service's GetNodes RPC.
	ServiceGetNodesProcedure = "/api.v1.operator.cluster.Service/GetNodes"
	// ServiceGetNodePodsProcedure is the fully-qualified name of the Service's GetNodePods RPC.
	ServiceGetNodePodsProcedure = "/api.v1.operator.cluster.Service/GetNodePods"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor           = cluster.File_operator_api_v1_cluster_service_proto.Services().ByName("Service")
	serviceGetNodesMethodDescriptor    = serviceServiceDescriptor.Methods().ByName("GetNodes")
	serviceGetNodePodsMethodDescriptor = serviceServiceDescriptor.Methods().ByName("GetNodePods")
)

// ServiceClient is a client for the api.v1.operator.cluster.Service service.
type ServiceClient interface {
	GetNodes(context.Context, *connect.Request[cluster.GetNodesRequest]) (*connect.Response[cluster.GetNodesResponse], error)
	GetNodePods(context.Context, *connect.Request[cluster.GetNodePodsRequest]) (*connect.Response[cluster.GetNodePodsResponse], error)
}

// NewServiceClient constructs a client for the api.v1.operator.cluster.Service service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		getNodes: connect.NewClient[cluster.GetNodesRequest, cluster.GetNodesResponse](
			httpClient,
			baseURL+ServiceGetNodesProcedure,
			connect.WithSchema(serviceGetNodesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNodePods: connect.NewClient[cluster.GetNodePodsRequest, cluster.GetNodePodsResponse](
			httpClient,
			baseURL+ServiceGetNodePodsProcedure,
			connect.WithSchema(serviceGetNodePodsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	getNodes    *connect.Client[cluster.GetNodesRequest, cluster.GetNodesResponse]
	getNodePods *connect.Client[cluster.GetNodePodsRequest, cluster.GetNodePodsResponse]
}

// GetNodes calls api.v1.operator.cluster.Service.GetNodes.
func (c *serviceClient) GetNodes(ctx context.Context, req *connect.Request[cluster.GetNodesRequest]) (*connect.Response[cluster.GetNodesResponse], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// GetNodePods calls api.v1.operator.cluster.Service.GetNodePods.
func (c *serviceClient) GetNodePods(ctx context.Context, req *connect.Request[cluster.GetNodePodsRequest]) (*connect.Response[cluster.GetNodePodsResponse], error) {
	return c.getNodePods.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.operator.cluster.Service service.
type ServiceHandler interface {
	GetNodes(context.Context, *connect.Request[cluster.GetNodesRequest]) (*connect.Response[cluster.GetNodesResponse], error)
	GetNodePods(context.Context, *connect.Request[cluster.GetNodePodsRequest]) (*connect.Response[cluster.GetNodePodsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceGetNodesHandler := connect.NewUnaryHandler(
		ServiceGetNodesProcedure,
		svc.GetNodes,
		connect.WithSchema(serviceGetNodesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetNodePodsHandler := connect.NewUnaryHandler(
		ServiceGetNodePodsProcedure,
		svc.GetNodePods,
		connect.WithSchema(serviceGetNodePodsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.operator.cluster.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceGetNodesProcedure:
			serviceGetNodesHandler.ServeHTTP(w, r)
		case ServiceGetNodePodsProcedure:
			serviceGetNodePodsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) GetNodes(context.Context, *connect.Request[cluster.GetNodesRequest]) (*connect.Response[cluster.GetNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.operator.cluster.Service.GetNodes is not implemented"))
}

func (UnimplementedServiceHandler) GetNodePods(context.Context, *connect.Request[cluster.GetNodePodsRequest]) (*connect.Response[cluster.GetNodePodsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.operator.cluster.Service.GetNodePods is not implemented"))
}
