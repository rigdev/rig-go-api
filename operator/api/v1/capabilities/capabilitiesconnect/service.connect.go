// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operator/api/v1/capabilities/service.proto

package capabilitiesconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	capabilities "github.com/rigdev/rig-go-api/operator/api/v1/capabilities"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.capabilities.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceGetConfigProcedure is the fully-qualified name of the Service's GetConfig RPC.
	ServiceGetConfigProcedure = "/api.v1.capabilities.Service/GetConfig"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.capabilities.Service/Get"
	// ServiceGetPluginsProcedure is the fully-qualified name of the Service's GetPlugins RPC.
	ServiceGetPluginsProcedure = "/api.v1.capabilities.Service/GetPlugins"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor          = capabilities.File_operator_api_v1_capabilities_service_proto.Services().ByName("Service")
	serviceGetConfigMethodDescriptor  = serviceServiceDescriptor.Methods().ByName("GetConfig")
	serviceGetMethodDescriptor        = serviceServiceDescriptor.Methods().ByName("Get")
	serviceGetPluginsMethodDescriptor = serviceServiceDescriptor.Methods().ByName("GetPlugins")
)

// ServiceClient is a client for the api.v1.capabilities.Service service.
type ServiceClient interface {
	GetConfig(context.Context, *connect.Request[capabilities.GetConfigRequest]) (*connect.Response[capabilities.GetConfigResponse], error)
	Get(context.Context, *connect.Request[capabilities.GetRequest]) (*connect.Response[capabilities.GetResponse], error)
	GetPlugins(context.Context, *connect.Request[capabilities.GetPluginsRequest]) (*connect.Response[capabilities.GetPluginsResponse], error)
}

// NewServiceClient constructs a client for the api.v1.capabilities.Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		getConfig: connect.NewClient[capabilities.GetConfigRequest, capabilities.GetConfigResponse](
			httpClient,
			baseURL+ServiceGetConfigProcedure,
			connect.WithSchema(serviceGetConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[capabilities.GetRequest, capabilities.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			connect.WithSchema(serviceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPlugins: connect.NewClient[capabilities.GetPluginsRequest, capabilities.GetPluginsResponse](
			httpClient,
			baseURL+ServiceGetPluginsProcedure,
			connect.WithSchema(serviceGetPluginsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	getConfig  *connect.Client[capabilities.GetConfigRequest, capabilities.GetConfigResponse]
	get        *connect.Client[capabilities.GetRequest, capabilities.GetResponse]
	getPlugins *connect.Client[capabilities.GetPluginsRequest, capabilities.GetPluginsResponse]
}

// GetConfig calls api.v1.capabilities.Service.GetConfig.
func (c *serviceClient) GetConfig(ctx context.Context, req *connect.Request[capabilities.GetConfigRequest]) (*connect.Response[capabilities.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// Get calls api.v1.capabilities.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect.Request[capabilities.GetRequest]) (*connect.Response[capabilities.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetPlugins calls api.v1.capabilities.Service.GetPlugins.
func (c *serviceClient) GetPlugins(ctx context.Context, req *connect.Request[capabilities.GetPluginsRequest]) (*connect.Response[capabilities.GetPluginsResponse], error) {
	return c.getPlugins.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.capabilities.Service service.
type ServiceHandler interface {
	GetConfig(context.Context, *connect.Request[capabilities.GetConfigRequest]) (*connect.Response[capabilities.GetConfigResponse], error)
	Get(context.Context, *connect.Request[capabilities.GetRequest]) (*connect.Response[capabilities.GetResponse], error)
	GetPlugins(context.Context, *connect.Request[capabilities.GetPluginsRequest]) (*connect.Response[capabilities.GetPluginsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceGetConfigHandler := connect.NewUnaryHandler(
		ServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(serviceGetConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetHandler := connect.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		connect.WithSchema(serviceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetPluginsHandler := connect.NewUnaryHandler(
		ServiceGetPluginsProcedure,
		svc.GetPlugins,
		connect.WithSchema(serviceGetPluginsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.capabilities.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceGetConfigProcedure:
			serviceGetConfigHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceGetPluginsProcedure:
			serviceGetPluginsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) GetConfig(context.Context, *connect.Request[capabilities.GetConfigRequest]) (*connect.Response[capabilities.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.capabilities.Service.GetConfig is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect.Request[capabilities.GetRequest]) (*connect.Response[capabilities.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.capabilities.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) GetPlugins(context.Context, *connect.Request[capabilities.GetPluginsRequest]) (*connect.Response[capabilities.GetPluginsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.capabilities.Service.GetPlugins is not implemented"))
}
