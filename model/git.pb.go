// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: model/git.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitProvider int32

const (
	GitProvider_GIT_PROVIDER_UNSPECIFIED GitProvider = 0
	GitProvider_GIT_PROVIDER_GITHUB      GitProvider = 1
	GitProvider_GIT_PROVIDER_GITLAB      GitProvider = 2
	GitProvider_GIT_PROVIDER_BITBUCKET   GitProvider = 3
)

// Enum value maps for GitProvider.
var (
	GitProvider_name = map[int32]string{
		0: "GIT_PROVIDER_UNSPECIFIED",
		1: "GIT_PROVIDER_GITHUB",
		2: "GIT_PROVIDER_GITLAB",
		3: "GIT_PROVIDER_BITBUCKET",
	}
	GitProvider_value = map[string]int32{
		"GIT_PROVIDER_UNSPECIFIED": 0,
		"GIT_PROVIDER_GITHUB":      1,
		"GIT_PROVIDER_GITLAB":      2,
		"GIT_PROVIDER_BITBUCKET":   3,
	}
)

func (x GitProvider) Enum() *GitProvider {
	p := new(GitProvider)
	*p = x
	return p
}

func (x GitProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_model_git_proto_enumTypes[0].Descriptor()
}

func (GitProvider) Type() protoreflect.EnumType {
	return &file_model_git_proto_enumTypes[0]
}

func (x GitProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitProvider.Descriptor instead.
func (GitProvider) EnumDescriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{0}
}

type GitStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disabled           bool               `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Repository         string             `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch             string             `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CapsulePath        string             `protobuf:"bytes,4,opt,name=capsule_path,json=capsulePath,proto3" json:"capsule_path,omitempty"`
	CommitTemplate     string             `protobuf:"bytes,5,opt,name=commit_template,json=commitTemplate,proto3" json:"commit_template,omitempty"`
	Environments       *EnvironmentFilter `protobuf:"bytes,6,opt,name=environments,proto3" json:"environments,omitempty"`
	PrTitleTemplate    string             `protobuf:"bytes,7,opt,name=pr_title_template,json=prTitleTemplate,proto3" json:"pr_title_template,omitempty"`
	PrBodyTemplate     string             `protobuf:"bytes,8,opt,name=pr_body_template,json=prBodyTemplate,proto3" json:"pr_body_template,omitempty"`
	RequirePullRequest bool               `protobuf:"varint,9,opt,name=require_pull_request,json=requirePullRequest,proto3" json:"require_pull_request,omitempty"`
}

func (x *GitStore) Reset() {
	*x = GitStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitStore) ProtoMessage() {}

func (x *GitStore) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitStore.ProtoReflect.Descriptor instead.
func (*GitStore) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{0}
}

func (x *GitStore) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *GitStore) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *GitStore) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GitStore) GetCapsulePath() string {
	if x != nil {
		return x.CapsulePath
	}
	return ""
}

func (x *GitStore) GetCommitTemplate() string {
	if x != nil {
		return x.CommitTemplate
	}
	return ""
}

func (x *GitStore) GetEnvironments() *EnvironmentFilter {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *GitStore) GetPrTitleTemplate() string {
	if x != nil {
		return x.PrTitleTemplate
	}
	return ""
}

func (x *GitStore) GetPrBodyTemplate() string {
	if x != nil {
		return x.PrBodyTemplate
	}
	return ""
}

func (x *GitStore) GetRequirePullRequest() bool {
	if x != nil {
		return x.RequirePullRequest
	}
	return false
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider GitProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=model.GitProvider" json:"provider,omitempty"`
	// Types that are assignable to ProviderInfo:
	//
	//	*Commit_Github
	//	*Commit_Gitlab
	//	*Commit_Bitbucket
	ProviderInfo  isCommit_ProviderInfo `protobuf_oneof:"provider_info"`
	CommitId      string                `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	CommitUrl     string                `protobuf:"bytes,4,opt,name=commit_url,json=commitUrl,proto3" json:"commit_url,omitempty"`
	RepositoryUrl string                `protobuf:"bytes,6,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{1}
}

func (x *Commit) GetProvider() GitProvider {
	if x != nil {
		return x.Provider
	}
	return GitProvider_GIT_PROVIDER_UNSPECIFIED
}

func (m *Commit) GetProviderInfo() isCommit_ProviderInfo {
	if m != nil {
		return m.ProviderInfo
	}
	return nil
}

func (x *Commit) GetGithub() *GitHubInfo {
	if x, ok := x.GetProviderInfo().(*Commit_Github); ok {
		return x.Github
	}
	return nil
}

func (x *Commit) GetGitlab() *GitLabInfo {
	if x, ok := x.GetProviderInfo().(*Commit_Gitlab); ok {
		return x.Gitlab
	}
	return nil
}

func (x *Commit) GetBitbucket() *BitBucketInfo {
	if x, ok := x.GetProviderInfo().(*Commit_Bitbucket); ok {
		return x.Bitbucket
	}
	return nil
}

func (x *Commit) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *Commit) GetCommitUrl() string {
	if x != nil {
		return x.CommitUrl
	}
	return ""
}

func (x *Commit) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

type isCommit_ProviderInfo interface {
	isCommit_ProviderInfo()
}

type Commit_Github struct {
	Github *GitHubInfo `protobuf:"bytes,7,opt,name=github,proto3,oneof"`
}

type Commit_Gitlab struct {
	Gitlab *GitLabInfo `protobuf:"bytes,8,opt,name=gitlab,proto3,oneof"`
}

type Commit_Bitbucket struct {
	Bitbucket *BitBucketInfo `protobuf:"bytes,9,opt,name=bitbucket,proto3,oneof"`
}

func (*Commit_Github) isCommit_ProviderInfo() {}

func (*Commit_Gitlab) isCommit_ProviderInfo() {}

func (*Commit_Bitbucket) isCommit_ProviderInfo() {}

type GitChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit  `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Paths  []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *GitChange) Reset() {
	*x = GitChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitChange) ProtoMessage() {}

func (x *GitChange) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitChange.ProtoReflect.Descriptor instead.
func (*GitChange) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{2}
}

func (x *GitChange) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *GitChange) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type GitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastProcessedCommitId    string                 `protobuf:"bytes,1,opt,name=last_processed_commit_id,json=lastProcessedCommitId,proto3" json:"last_processed_commit_id,omitempty"`
	LastProcessedCommitTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_processed_commit_time,json=lastProcessedCommitTime,proto3" json:"last_processed_commit_time,omitempty"`
	LastSuccessfulCommitId   string                 `protobuf:"bytes,3,opt,name=last_successful_commit_id,json=lastSuccessfulCommitId,proto3" json:"last_successful_commit_id,omitempty"`
	LastSuccessfulCommitTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_successful_commit_time,json=lastSuccessfulCommitTime,proto3" json:"last_successful_commit_time,omitempty"`
	Error                    string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GitStatus) Reset() {
	*x = GitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitStatus) ProtoMessage() {}

func (x *GitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitStatus.ProtoReflect.Descriptor instead.
func (*GitStatus) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{3}
}

func (x *GitStatus) GetLastProcessedCommitId() string {
	if x != nil {
		return x.LastProcessedCommitId
	}
	return ""
}

func (x *GitStatus) GetLastProcessedCommitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastProcessedCommitTime
	}
	return nil
}

func (x *GitStatus) GetLastSuccessfulCommitId() string {
	if x != nil {
		return x.LastSuccessfulCommitId
	}
	return ""
}

func (x *GitStatus) GetLastSuccessfulCommitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSuccessfulCommitTime
	}
	return nil
}

func (x *GitStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RepoBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch     string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *RepoBranch) Reset() {
	*x = RepoBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoBranch) ProtoMessage() {}

func (x *RepoBranch) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoBranch.ProtoReflect.Descriptor instead.
func (*RepoBranch) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{4}
}

func (x *RepoBranch) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *RepoBranch) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type GitHubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GitHubInfo) Reset() {
	*x = GitHubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubInfo) ProtoMessage() {}

func (x *GitHubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubInfo.ProtoReflect.Descriptor instead.
func (*GitHubInfo) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{5}
}

func (x *GitHubInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GitHubInfo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

type GitLabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups  []string `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Project string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GitLabInfo) Reset() {
	*x = GitLabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLabInfo) ProtoMessage() {}

func (x *GitLabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLabInfo.ProtoReflect.Descriptor instead.
func (*GitLabInfo) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{6}
}

func (x *GitLabInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GitLabInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type BitBucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team       string `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Project    string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *BitBucketInfo) Reset() {
	*x = BitBucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_git_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitBucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitBucketInfo) ProtoMessage() {}

func (x *BitBucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_git_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitBucketInfo.ProtoReflect.Descriptor instead.
func (*BitBucketInfo) Descriptor() ([]byte, []int) {
	return file_model_git_proto_rawDescGZIP(), []int{7}
}

func (x *BitBucketInfo) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *BitBucketInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BitBucketInfo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

var File_model_git_proto protoreflect.FileDescriptor

var file_model_git_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf0, 0x02, 0x0a, 0x08, 0x47, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x2b, 0x0a,
	0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x69,
	0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x72, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x22, 0x48, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x09, 0x47,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x57, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x42, 0x0a, 0x0a,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0x3e, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x5d, 0x0a, 0x0d, 0x42, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2a,
	0x79, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x18, 0x47, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x42,
	0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x42, 0x6d, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x08, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x69, 0x67, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x69, 0x67, 0x2d, 0x67, 0x6f, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x05,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xe2, 0x02, 0x11,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_model_git_proto_rawDescOnce sync.Once
	file_model_git_proto_rawDescData = file_model_git_proto_rawDesc
)

func file_model_git_proto_rawDescGZIP() []byte {
	file_model_git_proto_rawDescOnce.Do(func() {
		file_model_git_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_git_proto_rawDescData)
	})
	return file_model_git_proto_rawDescData
}

var file_model_git_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_model_git_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_model_git_proto_goTypes = []interface{}{
	(GitProvider)(0),              // 0: model.GitProvider
	(*GitStore)(nil),              // 1: model.GitStore
	(*Commit)(nil),                // 2: model.Commit
	(*GitChange)(nil),             // 3: model.GitChange
	(*GitStatus)(nil),             // 4: model.GitStatus
	(*RepoBranch)(nil),            // 5: model.RepoBranch
	(*GitHubInfo)(nil),            // 6: model.GitHubInfo
	(*GitLabInfo)(nil),            // 7: model.GitLabInfo
	(*BitBucketInfo)(nil),         // 8: model.BitBucketInfo
	(*EnvironmentFilter)(nil),     // 9: model.EnvironmentFilter
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_model_git_proto_depIdxs = []int32{
	9,  // 0: model.GitStore.environments:type_name -> model.EnvironmentFilter
	0,  // 1: model.Commit.provider:type_name -> model.GitProvider
	6,  // 2: model.Commit.github:type_name -> model.GitHubInfo
	7,  // 3: model.Commit.gitlab:type_name -> model.GitLabInfo
	8,  // 4: model.Commit.bitbucket:type_name -> model.BitBucketInfo
	2,  // 5: model.GitChange.commit:type_name -> model.Commit
	10, // 6: model.GitStatus.last_processed_commit_time:type_name -> google.protobuf.Timestamp
	10, // 7: model.GitStatus.last_successful_commit_time:type_name -> google.protobuf.Timestamp
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_model_git_proto_init() }
func file_model_git_proto_init() {
	if File_model_git_proto != nil {
		return
	}
	file_model_environment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_model_git_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_git_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitBucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_model_git_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Commit_Github)(nil),
		(*Commit_Gitlab)(nil),
		(*Commit_Bitbucket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_git_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_git_proto_goTypes,
		DependencyIndexes: file_model_git_proto_depIdxs,
		EnumInfos:         file_model_git_proto_enumTypes,
		MessageInfos:      file_model_git_proto_msgTypes,
	}.Build()
	File_model_git_proto = out.File
	file_model_git_proto_rawDesc = nil
	file_model_git_proto_goTypes = nil
	file_model_git_proto_depIdxs = nil
}
