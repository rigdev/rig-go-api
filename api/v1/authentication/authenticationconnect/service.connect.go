// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/authentication/service.proto

package authenticationconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	authentication "github.com/rigdev/rig-go-api/api/v1/authentication"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.authentication.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceLoginProcedure is the fully-qualified name of the Service's Login RPC.
	ServiceLoginProcedure = "/api.v1.authentication.Service/Login"
	// ServiceLogoutProcedure is the fully-qualified name of the Service's Logout RPC.
	ServiceLogoutProcedure = "/api.v1.authentication.Service/Logout"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.authentication.Service/Get"
	// ServiceRegisterProcedure is the fully-qualified name of the Service's Register RPC.
	ServiceRegisterProcedure = "/api.v1.authentication.Service/Register"
	// ServiceSendPasswordResetProcedure is the fully-qualified name of the Service's SendPasswordReset
	// RPC.
	ServiceSendPasswordResetProcedure = "/api.v1.authentication.Service/SendPasswordReset"
	// ServiceResetPasswordProcedure is the fully-qualified name of the Service's ResetPassword RPC.
	ServiceResetPasswordProcedure = "/api.v1.authentication.Service/ResetPassword"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.authentication.Service/Delete"
	// ServiceRefreshTokenProcedure is the fully-qualified name of the Service's RefreshToken RPC.
	ServiceRefreshTokenProcedure = "/api.v1.authentication.Service/RefreshToken"
	// ServiceGetAuthConfigProcedure is the fully-qualified name of the Service's GetAuthConfig RPC.
	ServiceGetAuthConfigProcedure = "/api.v1.authentication.Service/GetAuthConfig"
	// ServiceVerifyEmailProcedure is the fully-qualified name of the Service's VerifyEmail RPC.
	ServiceVerifyEmailProcedure = "/api.v1.authentication.Service/VerifyEmail"
	// ServiceVerifyPhoneNumberProcedure is the fully-qualified name of the Service's VerifyPhoneNumber
	// RPC.
	ServiceVerifyPhoneNumberProcedure = "/api.v1.authentication.Service/VerifyPhoneNumber"
)

// ServiceClient is a client for the api.v1.authentication.Service service.
type ServiceClient interface {
	// Login authenticats a user and returns a access/refresh token
	Login(context.Context, *connect_go.Request[authentication.LoginRequest]) (*connect_go.Response[authentication.LoginResponse], error)
	// Logout validates the access token and blocks it afterwards
	Logout(context.Context, *connect_go.Request[authentication.LogoutRequest]) (*connect_go.Response[authentication.LogoutResponse], error)
	// Get the logged in user
	Get(context.Context, *connect_go.Request[authentication.GetRequest]) (*connect_go.Response[authentication.GetResponse], error)
	// Register creates a new user
	Register(context.Context, *connect_go.Request[authentication.RegisterRequest]) (*connect_go.Response[authentication.RegisterResponse], error)
	// Send reset password email to the user
	SendPasswordReset(context.Context, *connect_go.Request[authentication.SendPasswordResetRequest]) (*connect_go.Response[authentication.SendPasswordResetResponse], error)
	// Reset password of the user
	ResetPassword(context.Context, *connect_go.Request[authentication.ResetPasswordRequest]) (*connect_go.Response[authentication.ResetPasswordResponse], error)
	// Delete logged in user
	Delete(context.Context, *connect_go.Request[authentication.DeleteRequest]) (*connect_go.Response[authentication.DeleteResponse], error)
	// Refresh logged in token pair
	RefreshToken(context.Context, *connect_go.Request[authentication.RefreshTokenRequest]) (*connect_go.Response[authentication.RefreshTokenResponse], error)
	// Get auth config for how available login methods
	GetAuthConfig(context.Context, *connect_go.Request[authentication.GetAuthConfigRequest]) (*connect_go.Response[authentication.GetAuthConfigResponse], error)
	// Verify email
	VerifyEmail(context.Context, *connect_go.Request[authentication.VerifyEmailRequest]) (*connect_go.Response[authentication.VerifyEmailResponse], error)
	// Verify phone number
	VerifyPhoneNumber(context.Context, *connect_go.Request[authentication.VerifyPhoneNumberRequest]) (*connect_go.Response[authentication.VerifyPhoneNumberResponse], error)
}

// NewServiceClient constructs a client for the api.v1.authentication.Service service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		login: connect_go.NewClient[authentication.LoginRequest, authentication.LoginResponse](
			httpClient,
			baseURL+ServiceLoginProcedure,
			opts...,
		),
		logout: connect_go.NewClient[authentication.LogoutRequest, authentication.LogoutResponse](
			httpClient,
			baseURL+ServiceLogoutProcedure,
			opts...,
		),
		get: connect_go.NewClient[authentication.GetRequest, authentication.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		register: connect_go.NewClient[authentication.RegisterRequest, authentication.RegisterResponse](
			httpClient,
			baseURL+ServiceRegisterProcedure,
			opts...,
		),
		sendPasswordReset: connect_go.NewClient[authentication.SendPasswordResetRequest, authentication.SendPasswordResetResponse](
			httpClient,
			baseURL+ServiceSendPasswordResetProcedure,
			opts...,
		),
		resetPassword: connect_go.NewClient[authentication.ResetPasswordRequest, authentication.ResetPasswordResponse](
			httpClient,
			baseURL+ServiceResetPasswordProcedure,
			opts...,
		),
		delete: connect_go.NewClient[authentication.DeleteRequest, authentication.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		refreshToken: connect_go.NewClient[authentication.RefreshTokenRequest, authentication.RefreshTokenResponse](
			httpClient,
			baseURL+ServiceRefreshTokenProcedure,
			opts...,
		),
		getAuthConfig: connect_go.NewClient[authentication.GetAuthConfigRequest, authentication.GetAuthConfigResponse](
			httpClient,
			baseURL+ServiceGetAuthConfigProcedure,
			opts...,
		),
		verifyEmail: connect_go.NewClient[authentication.VerifyEmailRequest, authentication.VerifyEmailResponse](
			httpClient,
			baseURL+ServiceVerifyEmailProcedure,
			opts...,
		),
		verifyPhoneNumber: connect_go.NewClient[authentication.VerifyPhoneNumberRequest, authentication.VerifyPhoneNumberResponse](
			httpClient,
			baseURL+ServiceVerifyPhoneNumberProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	login             *connect_go.Client[authentication.LoginRequest, authentication.LoginResponse]
	logout            *connect_go.Client[authentication.LogoutRequest, authentication.LogoutResponse]
	get               *connect_go.Client[authentication.GetRequest, authentication.GetResponse]
	register          *connect_go.Client[authentication.RegisterRequest, authentication.RegisterResponse]
	sendPasswordReset *connect_go.Client[authentication.SendPasswordResetRequest, authentication.SendPasswordResetResponse]
	resetPassword     *connect_go.Client[authentication.ResetPasswordRequest, authentication.ResetPasswordResponse]
	delete            *connect_go.Client[authentication.DeleteRequest, authentication.DeleteResponse]
	refreshToken      *connect_go.Client[authentication.RefreshTokenRequest, authentication.RefreshTokenResponse]
	getAuthConfig     *connect_go.Client[authentication.GetAuthConfigRequest, authentication.GetAuthConfigResponse]
	verifyEmail       *connect_go.Client[authentication.VerifyEmailRequest, authentication.VerifyEmailResponse]
	verifyPhoneNumber *connect_go.Client[authentication.VerifyPhoneNumberRequest, authentication.VerifyPhoneNumberResponse]
}

// Login calls api.v1.authentication.Service.Login.
func (c *serviceClient) Login(ctx context.Context, req *connect_go.Request[authentication.LoginRequest]) (*connect_go.Response[authentication.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls api.v1.authentication.Service.Logout.
func (c *serviceClient) Logout(ctx context.Context, req *connect_go.Request[authentication.LogoutRequest]) (*connect_go.Response[authentication.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// Get calls api.v1.authentication.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[authentication.GetRequest]) (*connect_go.Response[authentication.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Register calls api.v1.authentication.Service.Register.
func (c *serviceClient) Register(ctx context.Context, req *connect_go.Request[authentication.RegisterRequest]) (*connect_go.Response[authentication.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// SendPasswordReset calls api.v1.authentication.Service.SendPasswordReset.
func (c *serviceClient) SendPasswordReset(ctx context.Context, req *connect_go.Request[authentication.SendPasswordResetRequest]) (*connect_go.Response[authentication.SendPasswordResetResponse], error) {
	return c.sendPasswordReset.CallUnary(ctx, req)
}

// ResetPassword calls api.v1.authentication.Service.ResetPassword.
func (c *serviceClient) ResetPassword(ctx context.Context, req *connect_go.Request[authentication.ResetPasswordRequest]) (*connect_go.Response[authentication.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// Delete calls api.v1.authentication.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[authentication.DeleteRequest]) (*connect_go.Response[authentication.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// RefreshToken calls api.v1.authentication.Service.RefreshToken.
func (c *serviceClient) RefreshToken(ctx context.Context, req *connect_go.Request[authentication.RefreshTokenRequest]) (*connect_go.Response[authentication.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// GetAuthConfig calls api.v1.authentication.Service.GetAuthConfig.
func (c *serviceClient) GetAuthConfig(ctx context.Context, req *connect_go.Request[authentication.GetAuthConfigRequest]) (*connect_go.Response[authentication.GetAuthConfigResponse], error) {
	return c.getAuthConfig.CallUnary(ctx, req)
}

// VerifyEmail calls api.v1.authentication.Service.VerifyEmail.
func (c *serviceClient) VerifyEmail(ctx context.Context, req *connect_go.Request[authentication.VerifyEmailRequest]) (*connect_go.Response[authentication.VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// VerifyPhoneNumber calls api.v1.authentication.Service.VerifyPhoneNumber.
func (c *serviceClient) VerifyPhoneNumber(ctx context.Context, req *connect_go.Request[authentication.VerifyPhoneNumberRequest]) (*connect_go.Response[authentication.VerifyPhoneNumberResponse], error) {
	return c.verifyPhoneNumber.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.authentication.Service service.
type ServiceHandler interface {
	// Login authenticats a user and returns a access/refresh token
	Login(context.Context, *connect_go.Request[authentication.LoginRequest]) (*connect_go.Response[authentication.LoginResponse], error)
	// Logout validates the access token and blocks it afterwards
	Logout(context.Context, *connect_go.Request[authentication.LogoutRequest]) (*connect_go.Response[authentication.LogoutResponse], error)
	// Get the logged in user
	Get(context.Context, *connect_go.Request[authentication.GetRequest]) (*connect_go.Response[authentication.GetResponse], error)
	// Register creates a new user
	Register(context.Context, *connect_go.Request[authentication.RegisterRequest]) (*connect_go.Response[authentication.RegisterResponse], error)
	// Send reset password email to the user
	SendPasswordReset(context.Context, *connect_go.Request[authentication.SendPasswordResetRequest]) (*connect_go.Response[authentication.SendPasswordResetResponse], error)
	// Reset password of the user
	ResetPassword(context.Context, *connect_go.Request[authentication.ResetPasswordRequest]) (*connect_go.Response[authentication.ResetPasswordResponse], error)
	// Delete logged in user
	Delete(context.Context, *connect_go.Request[authentication.DeleteRequest]) (*connect_go.Response[authentication.DeleteResponse], error)
	// Refresh logged in token pair
	RefreshToken(context.Context, *connect_go.Request[authentication.RefreshTokenRequest]) (*connect_go.Response[authentication.RefreshTokenResponse], error)
	// Get auth config for how available login methods
	GetAuthConfig(context.Context, *connect_go.Request[authentication.GetAuthConfigRequest]) (*connect_go.Response[authentication.GetAuthConfigResponse], error)
	// Verify email
	VerifyEmail(context.Context, *connect_go.Request[authentication.VerifyEmailRequest]) (*connect_go.Response[authentication.VerifyEmailResponse], error)
	// Verify phone number
	VerifyPhoneNumber(context.Context, *connect_go.Request[authentication.VerifyPhoneNumberRequest]) (*connect_go.Response[authentication.VerifyPhoneNumberResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceLoginHandler := connect_go.NewUnaryHandler(
		ServiceLoginProcedure,
		svc.Login,
		opts...,
	)
	serviceLogoutHandler := connect_go.NewUnaryHandler(
		ServiceLogoutProcedure,
		svc.Logout,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceRegisterHandler := connect_go.NewUnaryHandler(
		ServiceRegisterProcedure,
		svc.Register,
		opts...,
	)
	serviceSendPasswordResetHandler := connect_go.NewUnaryHandler(
		ServiceSendPasswordResetProcedure,
		svc.SendPasswordReset,
		opts...,
	)
	serviceResetPasswordHandler := connect_go.NewUnaryHandler(
		ServiceResetPasswordProcedure,
		svc.ResetPassword,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceRefreshTokenHandler := connect_go.NewUnaryHandler(
		ServiceRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	serviceGetAuthConfigHandler := connect_go.NewUnaryHandler(
		ServiceGetAuthConfigProcedure,
		svc.GetAuthConfig,
		opts...,
	)
	serviceVerifyEmailHandler := connect_go.NewUnaryHandler(
		ServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		opts...,
	)
	serviceVerifyPhoneNumberHandler := connect_go.NewUnaryHandler(
		ServiceVerifyPhoneNumberProcedure,
		svc.VerifyPhoneNumber,
		opts...,
	)
	return "/api.v1.authentication.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceLoginProcedure:
			serviceLoginHandler.ServeHTTP(w, r)
		case ServiceLogoutProcedure:
			serviceLogoutHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceRegisterProcedure:
			serviceRegisterHandler.ServeHTTP(w, r)
		case ServiceSendPasswordResetProcedure:
			serviceSendPasswordResetHandler.ServeHTTP(w, r)
		case ServiceResetPasswordProcedure:
			serviceResetPasswordHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceRefreshTokenProcedure:
			serviceRefreshTokenHandler.ServeHTTP(w, r)
		case ServiceGetAuthConfigProcedure:
			serviceGetAuthConfigHandler.ServeHTTP(w, r)
		case ServiceVerifyEmailProcedure:
			serviceVerifyEmailHandler.ServeHTTP(w, r)
		case ServiceVerifyPhoneNumberProcedure:
			serviceVerifyPhoneNumberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Login(context.Context, *connect_go.Request[authentication.LoginRequest]) (*connect_go.Response[authentication.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.Login is not implemented"))
}

func (UnimplementedServiceHandler) Logout(context.Context, *connect_go.Request[authentication.LogoutRequest]) (*connect_go.Response[authentication.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.Logout is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[authentication.GetRequest]) (*connect_go.Response[authentication.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) Register(context.Context, *connect_go.Request[authentication.RegisterRequest]) (*connect_go.Response[authentication.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.Register is not implemented"))
}

func (UnimplementedServiceHandler) SendPasswordReset(context.Context, *connect_go.Request[authentication.SendPasswordResetRequest]) (*connect_go.Response[authentication.SendPasswordResetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.SendPasswordReset is not implemented"))
}

func (UnimplementedServiceHandler) ResetPassword(context.Context, *connect_go.Request[authentication.ResetPasswordRequest]) (*connect_go.Response[authentication.ResetPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.ResetPassword is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[authentication.DeleteRequest]) (*connect_go.Response[authentication.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) RefreshToken(context.Context, *connect_go.Request[authentication.RefreshTokenRequest]) (*connect_go.Response[authentication.RefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.RefreshToken is not implemented"))
}

func (UnimplementedServiceHandler) GetAuthConfig(context.Context, *connect_go.Request[authentication.GetAuthConfigRequest]) (*connect_go.Response[authentication.GetAuthConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.GetAuthConfig is not implemented"))
}

func (UnimplementedServiceHandler) VerifyEmail(context.Context, *connect_go.Request[authentication.VerifyEmailRequest]) (*connect_go.Response[authentication.VerifyEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.VerifyEmail is not implemented"))
}

func (UnimplementedServiceHandler) VerifyPhoneNumber(context.Context, *connect_go.Request[authentication.VerifyPhoneNumberRequest]) (*connect_go.Response[authentication.VerifyPhoneNumberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.authentication.Service.VerifyPhoneNumber is not implemented"))
}
