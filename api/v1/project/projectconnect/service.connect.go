// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/project/service.proto

package projectconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	project "github.com/rigdev/rig-go-api/api/v1/project"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.project.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.project.Service/Create"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.project.Service/Delete"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.project.Service/Get"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.project.Service/List"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/api.v1.project.Service/Update"
	// ServicePublicKeyProcedure is the fully-qualified name of the Service's PublicKey RPC.
	ServicePublicKeyProcedure = "/api.v1.project.Service/PublicKey"
	// ServiceUseProcedure is the fully-qualified name of the Service's Use RPC.
	ServiceUseProcedure = "/api.v1.project.Service/Use"
	// ServiceGetLicenseInfoProcedure is the fully-qualified name of the Service's GetLicenseInfo RPC.
	ServiceGetLicenseInfoProcedure = "/api.v1.project.Service/GetLicenseInfo"
	// ServiceGetCustomMetricsProcedure is the fully-qualified name of the Service's GetCustomMetrics
	// RPC.
	ServiceGetCustomMetricsProcedure = "/api.v1.project.Service/GetCustomMetrics"
)

// ServiceClient is a client for the api.v1.project.Service service.
type ServiceClient interface {
	// Create project
	Create(context.Context, *connect_go.Request[project.CreateRequest]) (*connect_go.Response[project.CreateResponse], error)
	// Delete project (everything in Users)
	Delete(context.Context, *connect_go.Request[project.DeleteRequest]) (*connect_go.Response[project.DeleteResponse], error)
	// Get project
	Get(context.Context, *connect_go.Request[project.GetRequest]) (*connect_go.Response[project.GetResponse], error)
	// Get project list
	List(context.Context, *connect_go.Request[project.ListRequest]) (*connect_go.Response[project.ListResponse], error)
	// Update updates the profile of the project
	Update(context.Context, *connect_go.Request[project.UpdateRequest]) (*connect_go.Response[project.UpdateResponse], error)
	// Get public key of system
	PublicKey(context.Context, *connect_go.Request[project.PublicKeyRequest]) (*connect_go.Response[project.PublicKeyResponse], error)
	// Use generates a project token for editing the project as the current
	// user.
	Use(context.Context, *connect_go.Request[project.UseRequest]) (*connect_go.Response[project.UseResponse], error)
	// Get License Information
	GetLicenseInfo(context.Context, *connect_go.Request[project.GetLicenseInfoRequest]) (*connect_go.Response[project.GetLicenseInfoResponse], error)
	GetCustomMetrics(context.Context, *connect_go.Request[project.GetCustomMetricsRequest]) (*connect_go.Response[project.GetCustomMetricsResponse], error)
}

// NewServiceClient constructs a client for the api.v1.project.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect_go.NewClient[project.CreateRequest, project.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[project.DeleteRequest, project.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		get: connect_go.NewClient[project.GetRequest, project.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		list: connect_go.NewClient[project.ListRequest, project.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			opts...,
		),
		update: connect_go.NewClient[project.UpdateRequest, project.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			opts...,
		),
		publicKey: connect_go.NewClient[project.PublicKeyRequest, project.PublicKeyResponse](
			httpClient,
			baseURL+ServicePublicKeyProcedure,
			opts...,
		),
		use: connect_go.NewClient[project.UseRequest, project.UseResponse](
			httpClient,
			baseURL+ServiceUseProcedure,
			opts...,
		),
		getLicenseInfo: connect_go.NewClient[project.GetLicenseInfoRequest, project.GetLicenseInfoResponse](
			httpClient,
			baseURL+ServiceGetLicenseInfoProcedure,
			opts...,
		),
		getCustomMetrics: connect_go.NewClient[project.GetCustomMetricsRequest, project.GetCustomMetricsResponse](
			httpClient,
			baseURL+ServiceGetCustomMetricsProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create           *connect_go.Client[project.CreateRequest, project.CreateResponse]
	delete           *connect_go.Client[project.DeleteRequest, project.DeleteResponse]
	get              *connect_go.Client[project.GetRequest, project.GetResponse]
	list             *connect_go.Client[project.ListRequest, project.ListResponse]
	update           *connect_go.Client[project.UpdateRequest, project.UpdateResponse]
	publicKey        *connect_go.Client[project.PublicKeyRequest, project.PublicKeyResponse]
	use              *connect_go.Client[project.UseRequest, project.UseResponse]
	getLicenseInfo   *connect_go.Client[project.GetLicenseInfoRequest, project.GetLicenseInfoResponse]
	getCustomMetrics *connect_go.Client[project.GetCustomMetricsRequest, project.GetCustomMetricsResponse]
}

// Create calls api.v1.project.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[project.CreateRequest]) (*connect_go.Response[project.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls api.v1.project.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[project.DeleteRequest]) (*connect_go.Response[project.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls api.v1.project.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[project.GetRequest]) (*connect_go.Response[project.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls api.v1.project.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect_go.Request[project.ListRequest]) (*connect_go.Response[project.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Update calls api.v1.project.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect_go.Request[project.UpdateRequest]) (*connect_go.Response[project.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// PublicKey calls api.v1.project.Service.PublicKey.
func (c *serviceClient) PublicKey(ctx context.Context, req *connect_go.Request[project.PublicKeyRequest]) (*connect_go.Response[project.PublicKeyResponse], error) {
	return c.publicKey.CallUnary(ctx, req)
}

// Use calls api.v1.project.Service.Use.
func (c *serviceClient) Use(ctx context.Context, req *connect_go.Request[project.UseRequest]) (*connect_go.Response[project.UseResponse], error) {
	return c.use.CallUnary(ctx, req)
}

// GetLicenseInfo calls api.v1.project.Service.GetLicenseInfo.
func (c *serviceClient) GetLicenseInfo(ctx context.Context, req *connect_go.Request[project.GetLicenseInfoRequest]) (*connect_go.Response[project.GetLicenseInfoResponse], error) {
	return c.getLicenseInfo.CallUnary(ctx, req)
}

// GetCustomMetrics calls api.v1.project.Service.GetCustomMetrics.
func (c *serviceClient) GetCustomMetrics(ctx context.Context, req *connect_go.Request[project.GetCustomMetricsRequest]) (*connect_go.Response[project.GetCustomMetricsResponse], error) {
	return c.getCustomMetrics.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.project.Service service.
type ServiceHandler interface {
	// Create project
	Create(context.Context, *connect_go.Request[project.CreateRequest]) (*connect_go.Response[project.CreateResponse], error)
	// Delete project (everything in Users)
	Delete(context.Context, *connect_go.Request[project.DeleteRequest]) (*connect_go.Response[project.DeleteResponse], error)
	// Get project
	Get(context.Context, *connect_go.Request[project.GetRequest]) (*connect_go.Response[project.GetResponse], error)
	// Get project list
	List(context.Context, *connect_go.Request[project.ListRequest]) (*connect_go.Response[project.ListResponse], error)
	// Update updates the profile of the project
	Update(context.Context, *connect_go.Request[project.UpdateRequest]) (*connect_go.Response[project.UpdateResponse], error)
	// Get public key of system
	PublicKey(context.Context, *connect_go.Request[project.PublicKeyRequest]) (*connect_go.Response[project.PublicKeyResponse], error)
	// Use generates a project token for editing the project as the current
	// user.
	Use(context.Context, *connect_go.Request[project.UseRequest]) (*connect_go.Response[project.UseResponse], error)
	// Get License Information
	GetLicenseInfo(context.Context, *connect_go.Request[project.GetLicenseInfoRequest]) (*connect_go.Response[project.GetLicenseInfoResponse], error)
	GetCustomMetrics(context.Context, *connect_go.Request[project.GetCustomMetricsRequest]) (*connect_go.Response[project.GetCustomMetricsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceListHandler := connect_go.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		opts...,
	)
	serviceUpdateHandler := connect_go.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	servicePublicKeyHandler := connect_go.NewUnaryHandler(
		ServicePublicKeyProcedure,
		svc.PublicKey,
		opts...,
	)
	serviceUseHandler := connect_go.NewUnaryHandler(
		ServiceUseProcedure,
		svc.Use,
		opts...,
	)
	serviceGetLicenseInfoHandler := connect_go.NewUnaryHandler(
		ServiceGetLicenseInfoProcedure,
		svc.GetLicenseInfo,
		opts...,
	)
	serviceGetCustomMetricsHandler := connect_go.NewUnaryHandler(
		ServiceGetCustomMetricsProcedure,
		svc.GetCustomMetrics,
		opts...,
	)
	return "/api.v1.project.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServicePublicKeyProcedure:
			servicePublicKeyHandler.ServeHTTP(w, r)
		case ServiceUseProcedure:
			serviceUseHandler.ServeHTTP(w, r)
		case ServiceGetLicenseInfoProcedure:
			serviceGetLicenseInfoHandler.ServeHTTP(w, r)
		case ServiceGetCustomMetricsProcedure:
			serviceGetCustomMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[project.CreateRequest]) (*connect_go.Response[project.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[project.DeleteRequest]) (*connect_go.Response[project.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[project.GetRequest]) (*connect_go.Response[project.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect_go.Request[project.ListRequest]) (*connect_go.Response[project.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect_go.Request[project.UpdateRequest]) (*connect_go.Response[project.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) PublicKey(context.Context, *connect_go.Request[project.PublicKeyRequest]) (*connect_go.Response[project.PublicKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.PublicKey is not implemented"))
}

func (UnimplementedServiceHandler) Use(context.Context, *connect_go.Request[project.UseRequest]) (*connect_go.Response[project.UseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.Use is not implemented"))
}

func (UnimplementedServiceHandler) GetLicenseInfo(context.Context, *connect_go.Request[project.GetLicenseInfoRequest]) (*connect_go.Response[project.GetLicenseInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.GetLicenseInfo is not implemented"))
}

func (UnimplementedServiceHandler) GetCustomMetrics(context.Context, *connect_go.Request[project.GetCustomMetricsRequest]) (*connect_go.Response[project.GetCustomMetricsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.project.Service.GetCustomMetrics is not implemented"))
}
