// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/project/service.proto

package projectconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	project "github.com/rigdev/rig-go-api/api/v1/project"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.project.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.project.Service/Create"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.project.Service/Delete"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.project.Service/Get"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.project.Service/List"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/api.v1.project.Service/Update"
	// ServicePublicKeyProcedure is the fully-qualified name of the Service's PublicKey RPC.
	ServicePublicKeyProcedure = "/api.v1.project.Service/PublicKey"
	// ServiceGetObjectsByKindProcedure is the fully-qualified name of the Service's GetObjectsByKind
	// RPC.
	ServiceGetObjectsByKindProcedure = "/api.v1.project.Service/GetObjectsByKind"
	// ServiceGetCustomObjectMetricsProcedure is the fully-qualified name of the Service's
	// GetCustomObjectMetrics RPC.
	ServiceGetCustomObjectMetricsProcedure = "/api.v1.project.Service/GetCustomObjectMetrics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor                      = project.File_api_v1_project_service_proto.Services().ByName("Service")
	serviceCreateMethodDescriptor                 = serviceServiceDescriptor.Methods().ByName("Create")
	serviceDeleteMethodDescriptor                 = serviceServiceDescriptor.Methods().ByName("Delete")
	serviceGetMethodDescriptor                    = serviceServiceDescriptor.Methods().ByName("Get")
	serviceListMethodDescriptor                   = serviceServiceDescriptor.Methods().ByName("List")
	serviceUpdateMethodDescriptor                 = serviceServiceDescriptor.Methods().ByName("Update")
	servicePublicKeyMethodDescriptor              = serviceServiceDescriptor.Methods().ByName("PublicKey")
	serviceGetObjectsByKindMethodDescriptor       = serviceServiceDescriptor.Methods().ByName("GetObjectsByKind")
	serviceGetCustomObjectMetricsMethodDescriptor = serviceServiceDescriptor.Methods().ByName("GetCustomObjectMetrics")
)

// ServiceClient is a client for the api.v1.project.Service service.
type ServiceClient interface {
	// Create project.
	Create(context.Context, *connect.Request[project.CreateRequest]) (*connect.Response[project.CreateResponse], error)
	// Delete project.
	Delete(context.Context, *connect.Request[project.DeleteRequest]) (*connect.Response[project.DeleteResponse], error)
	// Get project.
	Get(context.Context, *connect.Request[project.GetRequest]) (*connect.Response[project.GetResponse], error)
	// Get project list.
	List(context.Context, *connect.Request[project.ListRequest]) (*connect.Response[project.ListResponse], error)
	// Update updates the profile of the project.
	Update(context.Context, *connect.Request[project.UpdateRequest]) (*connect.Response[project.UpdateResponse], error)
	// Get public key.
	PublicKey(context.Context, *connect.Request[project.PublicKeyRequest]) (*connect.Response[project.PublicKeyResponse], error)
	// Returns all objects of a given kind.
	GetObjectsByKind(context.Context, *connect.Request[project.GetObjectsByKindRequest]) (*connect.Response[project.GetObjectsByKindResponse], error)
	// Returns all metrics of a given custom object.
	GetCustomObjectMetrics(context.Context, *connect.Request[project.GetCustomObjectMetricsRequest]) (*connect.Response[project.GetCustomObjectMetricsResponse], error)
}

// NewServiceClient constructs a client for the api.v1.project.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect.NewClient[project.CreateRequest, project.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			connect.WithSchema(serviceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[project.DeleteRequest, project.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			connect.WithSchema(serviceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[project.GetRequest, project.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			connect.WithSchema(serviceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[project.ListRequest, project.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			connect.WithSchema(serviceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[project.UpdateRequest, project.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			connect.WithSchema(serviceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publicKey: connect.NewClient[project.PublicKeyRequest, project.PublicKeyResponse](
			httpClient,
			baseURL+ServicePublicKeyProcedure,
			connect.WithSchema(servicePublicKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getObjectsByKind: connect.NewClient[project.GetObjectsByKindRequest, project.GetObjectsByKindResponse](
			httpClient,
			baseURL+ServiceGetObjectsByKindProcedure,
			connect.WithSchema(serviceGetObjectsByKindMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCustomObjectMetrics: connect.NewClient[project.GetCustomObjectMetricsRequest, project.GetCustomObjectMetricsResponse](
			httpClient,
			baseURL+ServiceGetCustomObjectMetricsProcedure,
			connect.WithSchema(serviceGetCustomObjectMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create                 *connect.Client[project.CreateRequest, project.CreateResponse]
	delete                 *connect.Client[project.DeleteRequest, project.DeleteResponse]
	get                    *connect.Client[project.GetRequest, project.GetResponse]
	list                   *connect.Client[project.ListRequest, project.ListResponse]
	update                 *connect.Client[project.UpdateRequest, project.UpdateResponse]
	publicKey              *connect.Client[project.PublicKeyRequest, project.PublicKeyResponse]
	getObjectsByKind       *connect.Client[project.GetObjectsByKindRequest, project.GetObjectsByKindResponse]
	getCustomObjectMetrics *connect.Client[project.GetCustomObjectMetricsRequest, project.GetCustomObjectMetricsResponse]
}

// Create calls api.v1.project.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect.Request[project.CreateRequest]) (*connect.Response[project.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls api.v1.project.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect.Request[project.DeleteRequest]) (*connect.Response[project.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls api.v1.project.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect.Request[project.GetRequest]) (*connect.Response[project.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls api.v1.project.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect.Request[project.ListRequest]) (*connect.Response[project.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Update calls api.v1.project.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect.Request[project.UpdateRequest]) (*connect.Response[project.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// PublicKey calls api.v1.project.Service.PublicKey.
func (c *serviceClient) PublicKey(ctx context.Context, req *connect.Request[project.PublicKeyRequest]) (*connect.Response[project.PublicKeyResponse], error) {
	return c.publicKey.CallUnary(ctx, req)
}

// GetObjectsByKind calls api.v1.project.Service.GetObjectsByKind.
func (c *serviceClient) GetObjectsByKind(ctx context.Context, req *connect.Request[project.GetObjectsByKindRequest]) (*connect.Response[project.GetObjectsByKindResponse], error) {
	return c.getObjectsByKind.CallUnary(ctx, req)
}

// GetCustomObjectMetrics calls api.v1.project.Service.GetCustomObjectMetrics.
func (c *serviceClient) GetCustomObjectMetrics(ctx context.Context, req *connect.Request[project.GetCustomObjectMetricsRequest]) (*connect.Response[project.GetCustomObjectMetricsResponse], error) {
	return c.getCustomObjectMetrics.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.project.Service service.
type ServiceHandler interface {
	// Create project.
	Create(context.Context, *connect.Request[project.CreateRequest]) (*connect.Response[project.CreateResponse], error)
	// Delete project.
	Delete(context.Context, *connect.Request[project.DeleteRequest]) (*connect.Response[project.DeleteResponse], error)
	// Get project.
	Get(context.Context, *connect.Request[project.GetRequest]) (*connect.Response[project.GetResponse], error)
	// Get project list.
	List(context.Context, *connect.Request[project.ListRequest]) (*connect.Response[project.ListResponse], error)
	// Update updates the profile of the project.
	Update(context.Context, *connect.Request[project.UpdateRequest]) (*connect.Response[project.UpdateResponse], error)
	// Get public key.
	PublicKey(context.Context, *connect.Request[project.PublicKeyRequest]) (*connect.Response[project.PublicKeyResponse], error)
	// Returns all objects of a given kind.
	GetObjectsByKind(context.Context, *connect.Request[project.GetObjectsByKindRequest]) (*connect.Response[project.GetObjectsByKindResponse], error)
	// Returns all metrics of a given custom object.
	GetCustomObjectMetrics(context.Context, *connect.Request[project.GetCustomObjectMetricsRequest]) (*connect.Response[project.GetCustomObjectMetricsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(serviceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDeleteHandler := connect.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(serviceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetHandler := connect.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		connect.WithSchema(serviceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceListHandler := connect.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		connect.WithSchema(serviceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceUpdateHandler := connect.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(serviceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicePublicKeyHandler := connect.NewUnaryHandler(
		ServicePublicKeyProcedure,
		svc.PublicKey,
		connect.WithSchema(servicePublicKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetObjectsByKindHandler := connect.NewUnaryHandler(
		ServiceGetObjectsByKindProcedure,
		svc.GetObjectsByKind,
		connect.WithSchema(serviceGetObjectsByKindMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetCustomObjectMetricsHandler := connect.NewUnaryHandler(
		ServiceGetCustomObjectMetricsProcedure,
		svc.GetCustomObjectMetrics,
		connect.WithSchema(serviceGetCustomObjectMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.project.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServicePublicKeyProcedure:
			servicePublicKeyHandler.ServeHTTP(w, r)
		case ServiceGetObjectsByKindProcedure:
			serviceGetObjectsByKindHandler.ServeHTTP(w, r)
		case ServiceGetCustomObjectMetricsProcedure:
			serviceGetCustomObjectMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect.Request[project.CreateRequest]) (*connect.Response[project.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect.Request[project.DeleteRequest]) (*connect.Response[project.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect.Request[project.GetRequest]) (*connect.Response[project.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect.Request[project.ListRequest]) (*connect.Response[project.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect.Request[project.UpdateRequest]) (*connect.Response[project.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) PublicKey(context.Context, *connect.Request[project.PublicKeyRequest]) (*connect.Response[project.PublicKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.PublicKey is not implemented"))
}

func (UnimplementedServiceHandler) GetObjectsByKind(context.Context, *connect.Request[project.GetObjectsByKindRequest]) (*connect.Response[project.GetObjectsByKindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.GetObjectsByKind is not implemented"))
}

func (UnimplementedServiceHandler) GetCustomObjectMetrics(context.Context, *connect.Request[project.GetCustomObjectMetricsRequest]) (*connect.Response[project.GetCustomObjectMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.project.Service.GetCustomObjectMetrics is not implemented"))
}
