// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/group/service.proto

package groupconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	group "github.com/rigdev/rig-go-api/api/v1/group"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.group.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.group.Service/Create"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.group.Service/Delete"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.group.Service/List"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/api.v1.group.Service/Update"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.group.Service/Get"
	// ServiceAddMemberProcedure is the fully-qualified name of the Service's AddMember RPC.
	ServiceAddMemberProcedure = "/api.v1.group.Service/AddMember"
	// ServiceRemoveMemberProcedure is the fully-qualified name of the Service's RemoveMember RPC.
	ServiceRemoveMemberProcedure = "/api.v1.group.Service/RemoveMember"
	// ServiceListMembersProcedure is the fully-qualified name of the Service's ListMembers RPC.
	ServiceListMembersProcedure = "/api.v1.group.Service/ListMembers"
	// ServiceListGroupsForMemberProcedure is the fully-qualified name of the Service's
	// ListGroupsForMember RPC.
	ServiceListGroupsForMemberProcedure = "/api.v1.group.Service/ListGroupsForMember"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor                   = group.File_api_v1_group_service_proto.Services().ByName("Service")
	serviceCreateMethodDescriptor              = serviceServiceDescriptor.Methods().ByName("Create")
	serviceDeleteMethodDescriptor              = serviceServiceDescriptor.Methods().ByName("Delete")
	serviceListMethodDescriptor                = serviceServiceDescriptor.Methods().ByName("List")
	serviceUpdateMethodDescriptor              = serviceServiceDescriptor.Methods().ByName("Update")
	serviceGetMethodDescriptor                 = serviceServiceDescriptor.Methods().ByName("Get")
	serviceAddMemberMethodDescriptor           = serviceServiceDescriptor.Methods().ByName("AddMember")
	serviceRemoveMemberMethodDescriptor        = serviceServiceDescriptor.Methods().ByName("RemoveMember")
	serviceListMembersMethodDescriptor         = serviceServiceDescriptor.Methods().ByName("ListMembers")
	serviceListGroupsForMemberMethodDescriptor = serviceServiceDescriptor.Methods().ByName("ListGroupsForMember")
)

// ServiceClient is a client for the api.v1.group.Service service.
type ServiceClient interface {
	// Create a new group.
	Create(context.Context, *connect.Request[group.CreateRequest]) (*connect.Response[group.CreateResponse], error)
	// Delete a group.
	Delete(context.Context, *connect.Request[group.DeleteRequest]) (*connect.Response[group.DeleteResponse], error)
	// List groups.
	List(context.Context, *connect.Request[group.ListRequest]) (*connect.Response[group.ListResponse], error)
	// Update group.
	Update(context.Context, *connect.Request[group.UpdateRequest]) (*connect.Response[group.UpdateResponse], error)
	// Get group.
	Get(context.Context, *connect.Request[group.GetRequest]) (*connect.Response[group.GetResponse], error)
	// Add a member to a group.
	AddMember(context.Context, *connect.Request[group.AddMemberRequest]) (*connect.Response[group.AddMemberResponse], error)
	// Remove member from group.
	RemoveMember(context.Context, *connect.Request[group.RemoveMemberRequest]) (*connect.Response[group.RemoveMemberResponse], error)
	// Get Group Members.
	ListMembers(context.Context, *connect.Request[group.ListMembersRequest]) (*connect.Response[group.ListMembersResponse], error)
	// Get Groups.
	ListGroupsForMember(context.Context, *connect.Request[group.ListGroupsForMemberRequest]) (*connect.Response[group.ListGroupsForMemberResponse], error)
}

// NewServiceClient constructs a client for the api.v1.group.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect.NewClient[group.CreateRequest, group.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			connect.WithSchema(serviceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[group.DeleteRequest, group.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			connect.WithSchema(serviceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[group.ListRequest, group.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			connect.WithSchema(serviceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[group.UpdateRequest, group.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			connect.WithSchema(serviceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[group.GetRequest, group.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			connect.WithSchema(serviceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addMember: connect.NewClient[group.AddMemberRequest, group.AddMemberResponse](
			httpClient,
			baseURL+ServiceAddMemberProcedure,
			connect.WithSchema(serviceAddMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeMember: connect.NewClient[group.RemoveMemberRequest, group.RemoveMemberResponse](
			httpClient,
			baseURL+ServiceRemoveMemberProcedure,
			connect.WithSchema(serviceRemoveMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMembers: connect.NewClient[group.ListMembersRequest, group.ListMembersResponse](
			httpClient,
			baseURL+ServiceListMembersProcedure,
			connect.WithSchema(serviceListMembersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGroupsForMember: connect.NewClient[group.ListGroupsForMemberRequest, group.ListGroupsForMemberResponse](
			httpClient,
			baseURL+ServiceListGroupsForMemberProcedure,
			connect.WithSchema(serviceListGroupsForMemberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create              *connect.Client[group.CreateRequest, group.CreateResponse]
	delete              *connect.Client[group.DeleteRequest, group.DeleteResponse]
	list                *connect.Client[group.ListRequest, group.ListResponse]
	update              *connect.Client[group.UpdateRequest, group.UpdateResponse]
	get                 *connect.Client[group.GetRequest, group.GetResponse]
	addMember           *connect.Client[group.AddMemberRequest, group.AddMemberResponse]
	removeMember        *connect.Client[group.RemoveMemberRequest, group.RemoveMemberResponse]
	listMembers         *connect.Client[group.ListMembersRequest, group.ListMembersResponse]
	listGroupsForMember *connect.Client[group.ListGroupsForMemberRequest, group.ListGroupsForMemberResponse]
}

// Create calls api.v1.group.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect.Request[group.CreateRequest]) (*connect.Response[group.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls api.v1.group.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect.Request[group.DeleteRequest]) (*connect.Response[group.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls api.v1.group.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect.Request[group.ListRequest]) (*connect.Response[group.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Update calls api.v1.group.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect.Request[group.UpdateRequest]) (*connect.Response[group.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Get calls api.v1.group.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect.Request[group.GetRequest]) (*connect.Response[group.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// AddMember calls api.v1.group.Service.AddMember.
func (c *serviceClient) AddMember(ctx context.Context, req *connect.Request[group.AddMemberRequest]) (*connect.Response[group.AddMemberResponse], error) {
	return c.addMember.CallUnary(ctx, req)
}

// RemoveMember calls api.v1.group.Service.RemoveMember.
func (c *serviceClient) RemoveMember(ctx context.Context, req *connect.Request[group.RemoveMemberRequest]) (*connect.Response[group.RemoveMemberResponse], error) {
	return c.removeMember.CallUnary(ctx, req)
}

// ListMembers calls api.v1.group.Service.ListMembers.
func (c *serviceClient) ListMembers(ctx context.Context, req *connect.Request[group.ListMembersRequest]) (*connect.Response[group.ListMembersResponse], error) {
	return c.listMembers.CallUnary(ctx, req)
}

// ListGroupsForMember calls api.v1.group.Service.ListGroupsForMember.
func (c *serviceClient) ListGroupsForMember(ctx context.Context, req *connect.Request[group.ListGroupsForMemberRequest]) (*connect.Response[group.ListGroupsForMemberResponse], error) {
	return c.listGroupsForMember.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.group.Service service.
type ServiceHandler interface {
	// Create a new group.
	Create(context.Context, *connect.Request[group.CreateRequest]) (*connect.Response[group.CreateResponse], error)
	// Delete a group.
	Delete(context.Context, *connect.Request[group.DeleteRequest]) (*connect.Response[group.DeleteResponse], error)
	// List groups.
	List(context.Context, *connect.Request[group.ListRequest]) (*connect.Response[group.ListResponse], error)
	// Update group.
	Update(context.Context, *connect.Request[group.UpdateRequest]) (*connect.Response[group.UpdateResponse], error)
	// Get group.
	Get(context.Context, *connect.Request[group.GetRequest]) (*connect.Response[group.GetResponse], error)
	// Add a member to a group.
	AddMember(context.Context, *connect.Request[group.AddMemberRequest]) (*connect.Response[group.AddMemberResponse], error)
	// Remove member from group.
	RemoveMember(context.Context, *connect.Request[group.RemoveMemberRequest]) (*connect.Response[group.RemoveMemberResponse], error)
	// Get Group Members.
	ListMembers(context.Context, *connect.Request[group.ListMembersRequest]) (*connect.Response[group.ListMembersResponse], error)
	// Get Groups.
	ListGroupsForMember(context.Context, *connect.Request[group.ListGroupsForMemberRequest]) (*connect.Response[group.ListGroupsForMemberResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(serviceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDeleteHandler := connect.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(serviceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceListHandler := connect.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		connect.WithSchema(serviceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceUpdateHandler := connect.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(serviceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetHandler := connect.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		connect.WithSchema(serviceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceAddMemberHandler := connect.NewUnaryHandler(
		ServiceAddMemberProcedure,
		svc.AddMember,
		connect.WithSchema(serviceAddMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceRemoveMemberHandler := connect.NewUnaryHandler(
		ServiceRemoveMemberProcedure,
		svc.RemoveMember,
		connect.WithSchema(serviceRemoveMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceListMembersHandler := connect.NewUnaryHandler(
		ServiceListMembersProcedure,
		svc.ListMembers,
		connect.WithSchema(serviceListMembersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceListGroupsForMemberHandler := connect.NewUnaryHandler(
		ServiceListGroupsForMemberProcedure,
		svc.ListGroupsForMember,
		connect.WithSchema(serviceListGroupsForMemberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.group.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceAddMemberProcedure:
			serviceAddMemberHandler.ServeHTTP(w, r)
		case ServiceRemoveMemberProcedure:
			serviceRemoveMemberHandler.ServeHTTP(w, r)
		case ServiceListMembersProcedure:
			serviceListMembersHandler.ServeHTTP(w, r)
		case ServiceListGroupsForMemberProcedure:
			serviceListGroupsForMemberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect.Request[group.CreateRequest]) (*connect.Response[group.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect.Request[group.DeleteRequest]) (*connect.Response[group.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect.Request[group.ListRequest]) (*connect.Response[group.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect.Request[group.UpdateRequest]) (*connect.Response[group.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect.Request[group.GetRequest]) (*connect.Response[group.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) AddMember(context.Context, *connect.Request[group.AddMemberRequest]) (*connect.Response[group.AddMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.AddMember is not implemented"))
}

func (UnimplementedServiceHandler) RemoveMember(context.Context, *connect.Request[group.RemoveMemberRequest]) (*connect.Response[group.RemoveMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.RemoveMember is not implemented"))
}

func (UnimplementedServiceHandler) ListMembers(context.Context, *connect.Request[group.ListMembersRequest]) (*connect.Response[group.ListMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.ListMembers is not implemented"))
}

func (UnimplementedServiceHandler) ListGroupsForMember(context.Context, *connect.Request[group.ListGroupsForMemberRequest]) (*connect.Response[group.ListGroupsForMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.group.Service.ListGroupsForMember is not implemented"))
}
