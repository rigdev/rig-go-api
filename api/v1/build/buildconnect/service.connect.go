// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/build/service.proto

package buildconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	build "github.com/rigdev/rig-go-api/api/v1/build"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.build.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceGetImageInfoProcedure is the fully-qualified name of the Service's GetImageInfo RPC.
	ServiceGetImageInfoProcedure = "/api.v1.build.Service/GetImageInfo"
	// ServiceGetRepositoryInfoProcedure is the fully-qualified name of the Service's GetRepositoryInfo
	// RPC.
	ServiceGetRepositoryInfoProcedure = "/api.v1.build.Service/GetRepositoryInfo"
	// ServiceGetBuildProcedure is the fully-qualified name of the Service's GetBuild RPC.
	ServiceGetBuildProcedure = "/api.v1.build.Service/GetBuild"
	// ServiceCreateBuildProcedure is the fully-qualified name of the Service's CreateBuild RPC.
	ServiceCreateBuildProcedure = "/api.v1.build.Service/CreateBuild"
	// ServiceListBuildsProcedure is the fully-qualified name of the Service's ListBuilds RPC.
	ServiceListBuildsProcedure = "/api.v1.build.Service/ListBuilds"
	// ServiceDeleteBuildProcedure is the fully-qualified name of the Service's DeleteBuild RPC.
	ServiceDeleteBuildProcedure = "/api.v1.build.Service/DeleteBuild"
)

// ServiceClient is a client for the api.v1.build.Service service.
type ServiceClient interface {
	GetImageInfo(context.Context, *connect_go.Request[build.GetImageInfoRequest]) (*connect_go.Response[build.GetImageInfoResponse], error)
	GetRepositoryInfo(context.Context, *connect_go.Request[build.GetRepositoryInfoRequest]) (*connect_go.Response[build.GetRepositoryInfoResponse], error)
	GetBuild(context.Context, *connect_go.Request[build.GetBuildRequest]) (*connect_go.Response[build.GetBuildResponse], error)
	// Create a new build.
	// Builds are immutable and cannot change. Create a new build to make
	// changes from an existing one.
	CreateBuild(context.Context, *connect_go.Request[build.CreateBuildRequest]) (*connect_go.Response[build.CreateBuildResponse], error)
	// List builds for a capsule.
	ListBuilds(context.Context, *connect_go.Request[build.ListBuildsRequest]) (*connect_go.Response[build.ListBuildsResponse], error)
	// Delete a build.
	DeleteBuild(context.Context, *connect_go.Request[build.DeleteBuildRequest]) (*connect_go.Response[build.DeleteBuildResponse], error)
}

// NewServiceClient constructs a client for the api.v1.build.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		getImageInfo: connect_go.NewClient[build.GetImageInfoRequest, build.GetImageInfoResponse](
			httpClient,
			baseURL+ServiceGetImageInfoProcedure,
			opts...,
		),
		getRepositoryInfo: connect_go.NewClient[build.GetRepositoryInfoRequest, build.GetRepositoryInfoResponse](
			httpClient,
			baseURL+ServiceGetRepositoryInfoProcedure,
			opts...,
		),
		getBuild: connect_go.NewClient[build.GetBuildRequest, build.GetBuildResponse](
			httpClient,
			baseURL+ServiceGetBuildProcedure,
			opts...,
		),
		createBuild: connect_go.NewClient[build.CreateBuildRequest, build.CreateBuildResponse](
			httpClient,
			baseURL+ServiceCreateBuildProcedure,
			opts...,
		),
		listBuilds: connect_go.NewClient[build.ListBuildsRequest, build.ListBuildsResponse](
			httpClient,
			baseURL+ServiceListBuildsProcedure,
			opts...,
		),
		deleteBuild: connect_go.NewClient[build.DeleteBuildRequest, build.DeleteBuildResponse](
			httpClient,
			baseURL+ServiceDeleteBuildProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	getImageInfo      *connect_go.Client[build.GetImageInfoRequest, build.GetImageInfoResponse]
	getRepositoryInfo *connect_go.Client[build.GetRepositoryInfoRequest, build.GetRepositoryInfoResponse]
	getBuild          *connect_go.Client[build.GetBuildRequest, build.GetBuildResponse]
	createBuild       *connect_go.Client[build.CreateBuildRequest, build.CreateBuildResponse]
	listBuilds        *connect_go.Client[build.ListBuildsRequest, build.ListBuildsResponse]
	deleteBuild       *connect_go.Client[build.DeleteBuildRequest, build.DeleteBuildResponse]
}

// GetImageInfo calls api.v1.build.Service.GetImageInfo.
func (c *serviceClient) GetImageInfo(ctx context.Context, req *connect_go.Request[build.GetImageInfoRequest]) (*connect_go.Response[build.GetImageInfoResponse], error) {
	return c.getImageInfo.CallUnary(ctx, req)
}

// GetRepositoryInfo calls api.v1.build.Service.GetRepositoryInfo.
func (c *serviceClient) GetRepositoryInfo(ctx context.Context, req *connect_go.Request[build.GetRepositoryInfoRequest]) (*connect_go.Response[build.GetRepositoryInfoResponse], error) {
	return c.getRepositoryInfo.CallUnary(ctx, req)
}

// GetBuild calls api.v1.build.Service.GetBuild.
func (c *serviceClient) GetBuild(ctx context.Context, req *connect_go.Request[build.GetBuildRequest]) (*connect_go.Response[build.GetBuildResponse], error) {
	return c.getBuild.CallUnary(ctx, req)
}

// CreateBuild calls api.v1.build.Service.CreateBuild.
func (c *serviceClient) CreateBuild(ctx context.Context, req *connect_go.Request[build.CreateBuildRequest]) (*connect_go.Response[build.CreateBuildResponse], error) {
	return c.createBuild.CallUnary(ctx, req)
}

// ListBuilds calls api.v1.build.Service.ListBuilds.
func (c *serviceClient) ListBuilds(ctx context.Context, req *connect_go.Request[build.ListBuildsRequest]) (*connect_go.Response[build.ListBuildsResponse], error) {
	return c.listBuilds.CallUnary(ctx, req)
}

// DeleteBuild calls api.v1.build.Service.DeleteBuild.
func (c *serviceClient) DeleteBuild(ctx context.Context, req *connect_go.Request[build.DeleteBuildRequest]) (*connect_go.Response[build.DeleteBuildResponse], error) {
	return c.deleteBuild.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.build.Service service.
type ServiceHandler interface {
	GetImageInfo(context.Context, *connect_go.Request[build.GetImageInfoRequest]) (*connect_go.Response[build.GetImageInfoResponse], error)
	GetRepositoryInfo(context.Context, *connect_go.Request[build.GetRepositoryInfoRequest]) (*connect_go.Response[build.GetRepositoryInfoResponse], error)
	GetBuild(context.Context, *connect_go.Request[build.GetBuildRequest]) (*connect_go.Response[build.GetBuildResponse], error)
	// Create a new build.
	// Builds are immutable and cannot change. Create a new build to make
	// changes from an existing one.
	CreateBuild(context.Context, *connect_go.Request[build.CreateBuildRequest]) (*connect_go.Response[build.CreateBuildResponse], error)
	// List builds for a capsule.
	ListBuilds(context.Context, *connect_go.Request[build.ListBuildsRequest]) (*connect_go.Response[build.ListBuildsResponse], error)
	// Delete a build.
	DeleteBuild(context.Context, *connect_go.Request[build.DeleteBuildRequest]) (*connect_go.Response[build.DeleteBuildResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceGetImageInfoHandler := connect_go.NewUnaryHandler(
		ServiceGetImageInfoProcedure,
		svc.GetImageInfo,
		opts...,
	)
	serviceGetRepositoryInfoHandler := connect_go.NewUnaryHandler(
		ServiceGetRepositoryInfoProcedure,
		svc.GetRepositoryInfo,
		opts...,
	)
	serviceGetBuildHandler := connect_go.NewUnaryHandler(
		ServiceGetBuildProcedure,
		svc.GetBuild,
		opts...,
	)
	serviceCreateBuildHandler := connect_go.NewUnaryHandler(
		ServiceCreateBuildProcedure,
		svc.CreateBuild,
		opts...,
	)
	serviceListBuildsHandler := connect_go.NewUnaryHandler(
		ServiceListBuildsProcedure,
		svc.ListBuilds,
		opts...,
	)
	serviceDeleteBuildHandler := connect_go.NewUnaryHandler(
		ServiceDeleteBuildProcedure,
		svc.DeleteBuild,
		opts...,
	)
	return "/api.v1.build.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceGetImageInfoProcedure:
			serviceGetImageInfoHandler.ServeHTTP(w, r)
		case ServiceGetRepositoryInfoProcedure:
			serviceGetRepositoryInfoHandler.ServeHTTP(w, r)
		case ServiceGetBuildProcedure:
			serviceGetBuildHandler.ServeHTTP(w, r)
		case ServiceCreateBuildProcedure:
			serviceCreateBuildHandler.ServeHTTP(w, r)
		case ServiceListBuildsProcedure:
			serviceListBuildsHandler.ServeHTTP(w, r)
		case ServiceDeleteBuildProcedure:
			serviceDeleteBuildHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) GetImageInfo(context.Context, *connect_go.Request[build.GetImageInfoRequest]) (*connect_go.Response[build.GetImageInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.build.Service.GetImageInfo is not implemented"))
}

func (UnimplementedServiceHandler) GetRepositoryInfo(context.Context, *connect_go.Request[build.GetRepositoryInfoRequest]) (*connect_go.Response[build.GetRepositoryInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.build.Service.GetRepositoryInfo is not implemented"))
}

func (UnimplementedServiceHandler) GetBuild(context.Context, *connect_go.Request[build.GetBuildRequest]) (*connect_go.Response[build.GetBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.build.Service.GetBuild is not implemented"))
}

func (UnimplementedServiceHandler) CreateBuild(context.Context, *connect_go.Request[build.CreateBuildRequest]) (*connect_go.Response[build.CreateBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.build.Service.CreateBuild is not implemented"))
}

func (UnimplementedServiceHandler) ListBuilds(context.Context, *connect_go.Request[build.ListBuildsRequest]) (*connect_go.Response[build.ListBuildsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.build.Service.ListBuilds is not implemented"))
}

func (UnimplementedServiceHandler) DeleteBuild(context.Context, *connect_go.Request[build.DeleteBuildRequest]) (*connect_go.Response[build.DeleteBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.build.Service.DeleteBuild is not implemented"))
}
