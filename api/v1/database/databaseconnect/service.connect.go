// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/database/service.proto

package databaseconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	database "github.com/rigdev/rig-go-api/api/v1/database"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.database.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateCredentialProcedure is the fully-qualified name of the Service's CreateCredential
	// RPC.
	ServiceCreateCredentialProcedure = "/api.v1.database.Service/CreateCredential"
	// ServiceDeleteCredentialProcedure is the fully-qualified name of the Service's DeleteCredential
	// RPC.
	ServiceDeleteCredentialProcedure = "/api.v1.database.Service/DeleteCredential"
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.database.Service/Create"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.database.Service/Get"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/api.v1.database.Service/Update"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.database.Service/Delete"
	// ServiceGetByNameProcedure is the fully-qualified name of the Service's GetByName RPC.
	ServiceGetByNameProcedure = "/api.v1.database.Service/GetByName"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.database.Service/List"
	// ServiceGetEndpointProcedure is the fully-qualified name of the Service's GetEndpoint RPC.
	ServiceGetEndpointProcedure = "/api.v1.database.Service/GetEndpoint"
	// ServiceCreateTableProcedure is the fully-qualified name of the Service's CreateTable RPC.
	ServiceCreateTableProcedure = "/api.v1.database.Service/CreateTable"
	// ServiceDeleteTableProcedure is the fully-qualified name of the Service's DeleteTable RPC.
	ServiceDeleteTableProcedure = "/api.v1.database.Service/DeleteTable"
	// ServiceListTablesProcedure is the fully-qualified name of the Service's ListTables RPC.
	ServiceListTablesProcedure = "/api.v1.database.Service/ListTables"
)

// ServiceClient is a client for the api.v1.database.Service service.
type ServiceClient interface {
	CreateCredential(context.Context, *connect_go.Request[database.CreateCredentialRequest]) (*connect_go.Response[database.CreateCredentialResponse], error)
	DeleteCredential(context.Context, *connect_go.Request[database.DeleteCredentialRequest]) (*connect_go.Response[database.DeleteCredentialResponse], error)
	Create(context.Context, *connect_go.Request[database.CreateRequest]) (*connect_go.Response[database.CreateResponse], error)
	Get(context.Context, *connect_go.Request[database.GetRequest]) (*connect_go.Response[database.GetResponse], error)
	Update(context.Context, *connect_go.Request[database.UpdateRequest]) (*connect_go.Response[database.UpdateResponse], error)
	Delete(context.Context, *connect_go.Request[database.DeleteRequest]) (*connect_go.Response[database.DeleteResponse], error)
	GetByName(context.Context, *connect_go.Request[database.GetByNameRequest]) (*connect_go.Response[database.GetByNameResponse], error)
	List(context.Context, *connect_go.Request[database.ListRequest]) (*connect_go.Response[database.ListResponse], error)
	GetEndpoint(context.Context, *connect_go.Request[database.GetEndpointRequest]) (*connect_go.Response[database.GetEndpointResponse], error)
	CreateTable(context.Context, *connect_go.Request[database.CreateTableRequest]) (*connect_go.Response[database.CreateTableResponse], error)
	DeleteTable(context.Context, *connect_go.Request[database.DeleteTableRequest]) (*connect_go.Response[database.DeleteTableResponse], error)
	ListTables(context.Context, *connect_go.Request[database.ListTablesRequest]) (*connect_go.Response[database.ListTablesResponse], error)
}

// NewServiceClient constructs a client for the api.v1.database.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		createCredential: connect_go.NewClient[database.CreateCredentialRequest, database.CreateCredentialResponse](
			httpClient,
			baseURL+ServiceCreateCredentialProcedure,
			opts...,
		),
		deleteCredential: connect_go.NewClient[database.DeleteCredentialRequest, database.DeleteCredentialResponse](
			httpClient,
			baseURL+ServiceDeleteCredentialProcedure,
			opts...,
		),
		create: connect_go.NewClient[database.CreateRequest, database.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		get: connect_go.NewClient[database.GetRequest, database.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		update: connect_go.NewClient[database.UpdateRequest, database.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[database.DeleteRequest, database.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		getByName: connect_go.NewClient[database.GetByNameRequest, database.GetByNameResponse](
			httpClient,
			baseURL+ServiceGetByNameProcedure,
			opts...,
		),
		list: connect_go.NewClient[database.ListRequest, database.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			opts...,
		),
		getEndpoint: connect_go.NewClient[database.GetEndpointRequest, database.GetEndpointResponse](
			httpClient,
			baseURL+ServiceGetEndpointProcedure,
			opts...,
		),
		createTable: connect_go.NewClient[database.CreateTableRequest, database.CreateTableResponse](
			httpClient,
			baseURL+ServiceCreateTableProcedure,
			opts...,
		),
		deleteTable: connect_go.NewClient[database.DeleteTableRequest, database.DeleteTableResponse](
			httpClient,
			baseURL+ServiceDeleteTableProcedure,
			opts...,
		),
		listTables: connect_go.NewClient[database.ListTablesRequest, database.ListTablesResponse](
			httpClient,
			baseURL+ServiceListTablesProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	createCredential *connect_go.Client[database.CreateCredentialRequest, database.CreateCredentialResponse]
	deleteCredential *connect_go.Client[database.DeleteCredentialRequest, database.DeleteCredentialResponse]
	create           *connect_go.Client[database.CreateRequest, database.CreateResponse]
	get              *connect_go.Client[database.GetRequest, database.GetResponse]
	update           *connect_go.Client[database.UpdateRequest, database.UpdateResponse]
	delete           *connect_go.Client[database.DeleteRequest, database.DeleteResponse]
	getByName        *connect_go.Client[database.GetByNameRequest, database.GetByNameResponse]
	list             *connect_go.Client[database.ListRequest, database.ListResponse]
	getEndpoint      *connect_go.Client[database.GetEndpointRequest, database.GetEndpointResponse]
	createTable      *connect_go.Client[database.CreateTableRequest, database.CreateTableResponse]
	deleteTable      *connect_go.Client[database.DeleteTableRequest, database.DeleteTableResponse]
	listTables       *connect_go.Client[database.ListTablesRequest, database.ListTablesResponse]
}

// CreateCredential calls api.v1.database.Service.CreateCredential.
func (c *serviceClient) CreateCredential(ctx context.Context, req *connect_go.Request[database.CreateCredentialRequest]) (*connect_go.Response[database.CreateCredentialResponse], error) {
	return c.createCredential.CallUnary(ctx, req)
}

// DeleteCredential calls api.v1.database.Service.DeleteCredential.
func (c *serviceClient) DeleteCredential(ctx context.Context, req *connect_go.Request[database.DeleteCredentialRequest]) (*connect_go.Response[database.DeleteCredentialResponse], error) {
	return c.deleteCredential.CallUnary(ctx, req)
}

// Create calls api.v1.database.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[database.CreateRequest]) (*connect_go.Response[database.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls api.v1.database.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[database.GetRequest]) (*connect_go.Response[database.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls api.v1.database.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect_go.Request[database.UpdateRequest]) (*connect_go.Response[database.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.database.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[database.DeleteRequest]) (*connect_go.Response[database.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// GetByName calls api.v1.database.Service.GetByName.
func (c *serviceClient) GetByName(ctx context.Context, req *connect_go.Request[database.GetByNameRequest]) (*connect_go.Response[database.GetByNameResponse], error) {
	return c.getByName.CallUnary(ctx, req)
}

// List calls api.v1.database.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect_go.Request[database.ListRequest]) (*connect_go.Response[database.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// GetEndpoint calls api.v1.database.Service.GetEndpoint.
func (c *serviceClient) GetEndpoint(ctx context.Context, req *connect_go.Request[database.GetEndpointRequest]) (*connect_go.Response[database.GetEndpointResponse], error) {
	return c.getEndpoint.CallUnary(ctx, req)
}

// CreateTable calls api.v1.database.Service.CreateTable.
func (c *serviceClient) CreateTable(ctx context.Context, req *connect_go.Request[database.CreateTableRequest]) (*connect_go.Response[database.CreateTableResponse], error) {
	return c.createTable.CallUnary(ctx, req)
}

// DeleteTable calls api.v1.database.Service.DeleteTable.
func (c *serviceClient) DeleteTable(ctx context.Context, req *connect_go.Request[database.DeleteTableRequest]) (*connect_go.Response[database.DeleteTableResponse], error) {
	return c.deleteTable.CallUnary(ctx, req)
}

// ListTables calls api.v1.database.Service.ListTables.
func (c *serviceClient) ListTables(ctx context.Context, req *connect_go.Request[database.ListTablesRequest]) (*connect_go.Response[database.ListTablesResponse], error) {
	return c.listTables.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.database.Service service.
type ServiceHandler interface {
	CreateCredential(context.Context, *connect_go.Request[database.CreateCredentialRequest]) (*connect_go.Response[database.CreateCredentialResponse], error)
	DeleteCredential(context.Context, *connect_go.Request[database.DeleteCredentialRequest]) (*connect_go.Response[database.DeleteCredentialResponse], error)
	Create(context.Context, *connect_go.Request[database.CreateRequest]) (*connect_go.Response[database.CreateResponse], error)
	Get(context.Context, *connect_go.Request[database.GetRequest]) (*connect_go.Response[database.GetResponse], error)
	Update(context.Context, *connect_go.Request[database.UpdateRequest]) (*connect_go.Response[database.UpdateResponse], error)
	Delete(context.Context, *connect_go.Request[database.DeleteRequest]) (*connect_go.Response[database.DeleteResponse], error)
	GetByName(context.Context, *connect_go.Request[database.GetByNameRequest]) (*connect_go.Response[database.GetByNameResponse], error)
	List(context.Context, *connect_go.Request[database.ListRequest]) (*connect_go.Response[database.ListResponse], error)
	GetEndpoint(context.Context, *connect_go.Request[database.GetEndpointRequest]) (*connect_go.Response[database.GetEndpointResponse], error)
	CreateTable(context.Context, *connect_go.Request[database.CreateTableRequest]) (*connect_go.Response[database.CreateTableResponse], error)
	DeleteTable(context.Context, *connect_go.Request[database.DeleteTableRequest]) (*connect_go.Response[database.DeleteTableResponse], error)
	ListTables(context.Context, *connect_go.Request[database.ListTablesRequest]) (*connect_go.Response[database.ListTablesResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateCredentialHandler := connect_go.NewUnaryHandler(
		ServiceCreateCredentialProcedure,
		svc.CreateCredential,
		opts...,
	)
	serviceDeleteCredentialHandler := connect_go.NewUnaryHandler(
		ServiceDeleteCredentialProcedure,
		svc.DeleteCredential,
		opts...,
	)
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceUpdateHandler := connect_go.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceGetByNameHandler := connect_go.NewUnaryHandler(
		ServiceGetByNameProcedure,
		svc.GetByName,
		opts...,
	)
	serviceListHandler := connect_go.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		opts...,
	)
	serviceGetEndpointHandler := connect_go.NewUnaryHandler(
		ServiceGetEndpointProcedure,
		svc.GetEndpoint,
		opts...,
	)
	serviceCreateTableHandler := connect_go.NewUnaryHandler(
		ServiceCreateTableProcedure,
		svc.CreateTable,
		opts...,
	)
	serviceDeleteTableHandler := connect_go.NewUnaryHandler(
		ServiceDeleteTableProcedure,
		svc.DeleteTable,
		opts...,
	)
	serviceListTablesHandler := connect_go.NewUnaryHandler(
		ServiceListTablesProcedure,
		svc.ListTables,
		opts...,
	)
	return "/api.v1.database.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateCredentialProcedure:
			serviceCreateCredentialHandler.ServeHTTP(w, r)
		case ServiceDeleteCredentialProcedure:
			serviceDeleteCredentialHandler.ServeHTTP(w, r)
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceGetByNameProcedure:
			serviceGetByNameHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceGetEndpointProcedure:
			serviceGetEndpointHandler.ServeHTTP(w, r)
		case ServiceCreateTableProcedure:
			serviceCreateTableHandler.ServeHTTP(w, r)
		case ServiceDeleteTableProcedure:
			serviceDeleteTableHandler.ServeHTTP(w, r)
		case ServiceListTablesProcedure:
			serviceListTablesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) CreateCredential(context.Context, *connect_go.Request[database.CreateCredentialRequest]) (*connect_go.Response[database.CreateCredentialResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.CreateCredential is not implemented"))
}

func (UnimplementedServiceHandler) DeleteCredential(context.Context, *connect_go.Request[database.DeleteCredentialRequest]) (*connect_go.Response[database.DeleteCredentialResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.DeleteCredential is not implemented"))
}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[database.CreateRequest]) (*connect_go.Response[database.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[database.GetRequest]) (*connect_go.Response[database.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect_go.Request[database.UpdateRequest]) (*connect_go.Response[database.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[database.DeleteRequest]) (*connect_go.Response[database.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) GetByName(context.Context, *connect_go.Request[database.GetByNameRequest]) (*connect_go.Response[database.GetByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.GetByName is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect_go.Request[database.ListRequest]) (*connect_go.Response[database.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) GetEndpoint(context.Context, *connect_go.Request[database.GetEndpointRequest]) (*connect_go.Response[database.GetEndpointResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.GetEndpoint is not implemented"))
}

func (UnimplementedServiceHandler) CreateTable(context.Context, *connect_go.Request[database.CreateTableRequest]) (*connect_go.Response[database.CreateTableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.CreateTable is not implemented"))
}

func (UnimplementedServiceHandler) DeleteTable(context.Context, *connect_go.Request[database.DeleteTableRequest]) (*connect_go.Response[database.DeleteTableResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.DeleteTable is not implemented"))
}

func (UnimplementedServiceHandler) ListTables(context.Context, *connect_go.Request[database.ListTablesRequest]) (*connect_go.Response[database.ListTablesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.database.Service.ListTables is not implemented"))
}
