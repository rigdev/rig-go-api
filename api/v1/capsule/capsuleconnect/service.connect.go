// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/capsule/service.proto

package capsuleconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	capsule "github.com/rigdev/rig-go-api/api/v1/capsule"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.capsule.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.capsule.Service/Create"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.capsule.Service/Get"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.capsule.Service/Delete"
	// ServiceLogsProcedure is the fully-qualified name of the Service's Logs RPC.
	ServiceLogsProcedure = "/api.v1.capsule.Service/Logs"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/api.v1.capsule.Service/Update"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.capsule.Service/List"
	// ServiceCreateBuildProcedure is the fully-qualified name of the Service's CreateBuild RPC.
	ServiceCreateBuildProcedure = "/api.v1.capsule.Service/CreateBuild"
	// ServiceListBuildsProcedure is the fully-qualified name of the Service's ListBuilds RPC.
	ServiceListBuildsProcedure = "/api.v1.capsule.Service/ListBuilds"
	// ServiceDeleteBuildProcedure is the fully-qualified name of the Service's DeleteBuild RPC.
	ServiceDeleteBuildProcedure = "/api.v1.capsule.Service/DeleteBuild"
	// ServiceDeployProcedure is the fully-qualified name of the Service's Deploy RPC.
	ServiceDeployProcedure = "/api.v1.capsule.Service/Deploy"
	// ServiceListInstancesProcedure is the fully-qualified name of the Service's ListInstances RPC.
	ServiceListInstancesProcedure = "/api.v1.capsule.Service/ListInstances"
	// ServiceRestartInstanceProcedure is the fully-qualified name of the Service's RestartInstance RPC.
	ServiceRestartInstanceProcedure = "/api.v1.capsule.Service/RestartInstance"
	// ServiceGetRolloutProcedure is the fully-qualified name of the Service's GetRollout RPC.
	ServiceGetRolloutProcedure = "/api.v1.capsule.Service/GetRollout"
	// ServiceListRolloutsProcedure is the fully-qualified name of the Service's ListRollouts RPC.
	ServiceListRolloutsProcedure = "/api.v1.capsule.Service/ListRollouts"
	// ServiceAbortRolloutProcedure is the fully-qualified name of the Service's AbortRollout RPC.
	ServiceAbortRolloutProcedure = "/api.v1.capsule.Service/AbortRollout"
	// ServiceListEventsProcedure is the fully-qualified name of the Service's ListEvents RPC.
	ServiceListEventsProcedure = "/api.v1.capsule.Service/ListEvents"
	// ServiceCapsuleMetricsProcedure is the fully-qualified name of the Service's CapsuleMetrics RPC.
	ServiceCapsuleMetricsProcedure = "/api.v1.capsule.Service/CapsuleMetrics"
	// ServiceGetInstanceStatusProcedure is the fully-qualified name of the Service's GetInstanceStatus
	// RPC.
	ServiceGetInstanceStatusProcedure = "/api.v1.capsule.Service/GetInstanceStatus"
	// ServiceListInstanceStatusesProcedure is the fully-qualified name of the Service's
	// ListInstanceStatuses RPC.
	ServiceListInstanceStatusesProcedure = "/api.v1.capsule.Service/ListInstanceStatuses"
	// ServiceExecuteProcedure is the fully-qualified name of the Service's Execute RPC.
	ServiceExecuteProcedure = "/api.v1.capsule.Service/Execute"
	// ServiceGetCustomInstanceMetricsProcedure is the fully-qualified name of the Service's
	// GetCustomInstanceMetrics RPC.
	ServiceGetCustomInstanceMetricsProcedure = "/api.v1.capsule.Service/GetCustomInstanceMetrics"
	// ServiceGetJobExecutionsProcedure is the fully-qualified name of the Service's GetJobExecutions
	// RPC.
	ServiceGetJobExecutionsProcedure = "/api.v1.capsule.Service/GetJobExecutions"
)

// ServiceClient is a client for the api.v1.capsule.Service service.
type ServiceClient interface {
	// Create a new capsule.
	Create(context.Context, *connect_go.Request[capsule.CreateRequest]) (*connect_go.Response[capsule.CreateResponse], error)
	// Get a capsule by id.
	Get(context.Context, *connect_go.Request[capsule.GetRequest]) (*connect_go.Response[capsule.GetResponse], error)
	// Delete a capsule.
	Delete(context.Context, *connect_go.Request[capsule.DeleteRequest]) (*connect_go.Response[capsule.DeleteResponse], error)
	// Logs returns (and streams) the log output of a capsule.
	Logs(context.Context, *connect_go.Request[capsule.LogsRequest]) (*connect_go.ServerStreamForClient[capsule.LogsResponse], error)
	// Update a capsule.
	Update(context.Context, *connect_go.Request[capsule.UpdateRequest]) (*connect_go.Response[capsule.UpdateResponse], error)
	// Lists all capsules for current project.
	List(context.Context, *connect_go.Request[capsule.ListRequest]) (*connect_go.Response[capsule.ListResponse], error)
	// Create a new build.
	// Builds are immutable and cannot change. Create a new build to make
	// changes from an existing one.
	CreateBuild(context.Context, *connect_go.Request[capsule.CreateBuildRequest]) (*connect_go.Response[capsule.CreateBuildResponse], error)
	// List builds for a capsule.
	ListBuilds(context.Context, *connect_go.Request[capsule.ListBuildsRequest]) (*connect_go.Response[capsule.ListBuildsResponse], error)
	// Delete a build.
	DeleteBuild(context.Context, *connect_go.Request[capsule.DeleteBuildRequest]) (*connect_go.Response[capsule.DeleteBuildResponse], error)
	// Deploy changes to a capsule.
	// When deploying, a new rollout will be initiated. Only one rollout can be
	// running at a single point in time.
	// Use `Abort` to abort an already running rollout.
	Deploy(context.Context, *connect_go.Request[capsule.DeployRequest]) (*connect_go.Response[capsule.DeployResponse], error)
	// Lists all instances for the capsule.
	ListInstances(context.Context, *connect_go.Request[capsule.ListInstancesRequest]) (*connect_go.Response[capsule.ListInstancesResponse], error)
	// Restart a single capsule instance.
	RestartInstance(context.Context, *connect_go.Request[capsule.RestartInstanceRequest]) (*connect_go.Response[capsule.RestartInstanceResponse], error)
	// Get a single rollout by ID.
	GetRollout(context.Context, *connect_go.Request[capsule.GetRolloutRequest]) (*connect_go.Response[capsule.GetRolloutResponse], error)
	// Lists all rollouts for the capsule.
	ListRollouts(context.Context, *connect_go.Request[capsule.ListRolloutsRequest]) (*connect_go.Response[capsule.ListRolloutsResponse], error)
	// Abort the rollout.
	AbortRollout(context.Context, *connect_go.Request[capsule.AbortRolloutRequest]) (*connect_go.Response[capsule.AbortRolloutResponse], error)
	ListEvents(context.Context, *connect_go.Request[capsule.ListEventsRequest]) (*connect_go.Response[capsule.ListEventsResponse], error)
	// Get metrics for a capsule
	CapsuleMetrics(context.Context, *connect_go.Request[capsule.CapsuleMetricsRequest]) (*connect_go.Response[capsule.CapsuleMetricsResponse], error)
	// GetInstanceStatus returns the current status for the given instance
	GetInstanceStatus(context.Context, *connect_go.Request[capsule.GetInstanceStatusRequest]) (*connect_go.Response[capsule.GetInstanceStatusResponse], error)
	// ListInstanceStatuses lists the status of all instances.
	ListInstanceStatuses(context.Context, *connect_go.Request[capsule.ListInstanceStatusesRequest]) (*connect_go.Response[capsule.ListInstanceStatusesResponse], error)
	// Execute executes a command in a given in instance,
	// and returns the output along with an exit code.
	Execute(context.Context) *connect_go.BidiStreamForClient[capsule.ExecuteRequest, capsule.ExecuteResponse]
	GetCustomInstanceMetrics(context.Context, *connect_go.Request[capsule.GetCustomInstanceMetricsRequest]) (*connect_go.Response[capsule.GetCustomInstanceMetricsResponse], error)
	GetJobExecutions(context.Context, *connect_go.Request[capsule.GetJobExecutionsRequest]) (*connect_go.Response[capsule.GetJobExecutionsResponse], error)
}

// NewServiceClient constructs a client for the api.v1.capsule.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect_go.NewClient[capsule.CreateRequest, capsule.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		get: connect_go.NewClient[capsule.GetRequest, capsule.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			opts...,
		),
		delete: connect_go.NewClient[capsule.DeleteRequest, capsule.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
		logs: connect_go.NewClient[capsule.LogsRequest, capsule.LogsResponse](
			httpClient,
			baseURL+ServiceLogsProcedure,
			opts...,
		),
		update: connect_go.NewClient[capsule.UpdateRequest, capsule.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			opts...,
		),
		list: connect_go.NewClient[capsule.ListRequest, capsule.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			opts...,
		),
		createBuild: connect_go.NewClient[capsule.CreateBuildRequest, capsule.CreateBuildResponse](
			httpClient,
			baseURL+ServiceCreateBuildProcedure,
			opts...,
		),
		listBuilds: connect_go.NewClient[capsule.ListBuildsRequest, capsule.ListBuildsResponse](
			httpClient,
			baseURL+ServiceListBuildsProcedure,
			opts...,
		),
		deleteBuild: connect_go.NewClient[capsule.DeleteBuildRequest, capsule.DeleteBuildResponse](
			httpClient,
			baseURL+ServiceDeleteBuildProcedure,
			opts...,
		),
		deploy: connect_go.NewClient[capsule.DeployRequest, capsule.DeployResponse](
			httpClient,
			baseURL+ServiceDeployProcedure,
			opts...,
		),
		listInstances: connect_go.NewClient[capsule.ListInstancesRequest, capsule.ListInstancesResponse](
			httpClient,
			baseURL+ServiceListInstancesProcedure,
			opts...,
		),
		restartInstance: connect_go.NewClient[capsule.RestartInstanceRequest, capsule.RestartInstanceResponse](
			httpClient,
			baseURL+ServiceRestartInstanceProcedure,
			opts...,
		),
		getRollout: connect_go.NewClient[capsule.GetRolloutRequest, capsule.GetRolloutResponse](
			httpClient,
			baseURL+ServiceGetRolloutProcedure,
			opts...,
		),
		listRollouts: connect_go.NewClient[capsule.ListRolloutsRequest, capsule.ListRolloutsResponse](
			httpClient,
			baseURL+ServiceListRolloutsProcedure,
			opts...,
		),
		abortRollout: connect_go.NewClient[capsule.AbortRolloutRequest, capsule.AbortRolloutResponse](
			httpClient,
			baseURL+ServiceAbortRolloutProcedure,
			opts...,
		),
		listEvents: connect_go.NewClient[capsule.ListEventsRequest, capsule.ListEventsResponse](
			httpClient,
			baseURL+ServiceListEventsProcedure,
			opts...,
		),
		capsuleMetrics: connect_go.NewClient[capsule.CapsuleMetricsRequest, capsule.CapsuleMetricsResponse](
			httpClient,
			baseURL+ServiceCapsuleMetricsProcedure,
			opts...,
		),
		getInstanceStatus: connect_go.NewClient[capsule.GetInstanceStatusRequest, capsule.GetInstanceStatusResponse](
			httpClient,
			baseURL+ServiceGetInstanceStatusProcedure,
			opts...,
		),
		listInstanceStatuses: connect_go.NewClient[capsule.ListInstanceStatusesRequest, capsule.ListInstanceStatusesResponse](
			httpClient,
			baseURL+ServiceListInstanceStatusesProcedure,
			opts...,
		),
		execute: connect_go.NewClient[capsule.ExecuteRequest, capsule.ExecuteResponse](
			httpClient,
			baseURL+ServiceExecuteProcedure,
			opts...,
		),
		getCustomInstanceMetrics: connect_go.NewClient[capsule.GetCustomInstanceMetricsRequest, capsule.GetCustomInstanceMetricsResponse](
			httpClient,
			baseURL+ServiceGetCustomInstanceMetricsProcedure,
			opts...,
		),
		getJobExecutions: connect_go.NewClient[capsule.GetJobExecutionsRequest, capsule.GetJobExecutionsResponse](
			httpClient,
			baseURL+ServiceGetJobExecutionsProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create                   *connect_go.Client[capsule.CreateRequest, capsule.CreateResponse]
	get                      *connect_go.Client[capsule.GetRequest, capsule.GetResponse]
	delete                   *connect_go.Client[capsule.DeleteRequest, capsule.DeleteResponse]
	logs                     *connect_go.Client[capsule.LogsRequest, capsule.LogsResponse]
	update                   *connect_go.Client[capsule.UpdateRequest, capsule.UpdateResponse]
	list                     *connect_go.Client[capsule.ListRequest, capsule.ListResponse]
	createBuild              *connect_go.Client[capsule.CreateBuildRequest, capsule.CreateBuildResponse]
	listBuilds               *connect_go.Client[capsule.ListBuildsRequest, capsule.ListBuildsResponse]
	deleteBuild              *connect_go.Client[capsule.DeleteBuildRequest, capsule.DeleteBuildResponse]
	deploy                   *connect_go.Client[capsule.DeployRequest, capsule.DeployResponse]
	listInstances            *connect_go.Client[capsule.ListInstancesRequest, capsule.ListInstancesResponse]
	restartInstance          *connect_go.Client[capsule.RestartInstanceRequest, capsule.RestartInstanceResponse]
	getRollout               *connect_go.Client[capsule.GetRolloutRequest, capsule.GetRolloutResponse]
	listRollouts             *connect_go.Client[capsule.ListRolloutsRequest, capsule.ListRolloutsResponse]
	abortRollout             *connect_go.Client[capsule.AbortRolloutRequest, capsule.AbortRolloutResponse]
	listEvents               *connect_go.Client[capsule.ListEventsRequest, capsule.ListEventsResponse]
	capsuleMetrics           *connect_go.Client[capsule.CapsuleMetricsRequest, capsule.CapsuleMetricsResponse]
	getInstanceStatus        *connect_go.Client[capsule.GetInstanceStatusRequest, capsule.GetInstanceStatusResponse]
	listInstanceStatuses     *connect_go.Client[capsule.ListInstanceStatusesRequest, capsule.ListInstanceStatusesResponse]
	execute                  *connect_go.Client[capsule.ExecuteRequest, capsule.ExecuteResponse]
	getCustomInstanceMetrics *connect_go.Client[capsule.GetCustomInstanceMetricsRequest, capsule.GetCustomInstanceMetricsResponse]
	getJobExecutions         *connect_go.Client[capsule.GetJobExecutionsRequest, capsule.GetJobExecutionsResponse]
}

// Create calls api.v1.capsule.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[capsule.CreateRequest]) (*connect_go.Response[capsule.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls api.v1.capsule.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect_go.Request[capsule.GetRequest]) (*connect_go.Response[capsule.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls api.v1.capsule.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[capsule.DeleteRequest]) (*connect_go.Response[capsule.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Logs calls api.v1.capsule.Service.Logs.
func (c *serviceClient) Logs(ctx context.Context, req *connect_go.Request[capsule.LogsRequest]) (*connect_go.ServerStreamForClient[capsule.LogsResponse], error) {
	return c.logs.CallServerStream(ctx, req)
}

// Update calls api.v1.capsule.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect_go.Request[capsule.UpdateRequest]) (*connect_go.Response[capsule.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// List calls api.v1.capsule.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect_go.Request[capsule.ListRequest]) (*connect_go.Response[capsule.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// CreateBuild calls api.v1.capsule.Service.CreateBuild.
func (c *serviceClient) CreateBuild(ctx context.Context, req *connect_go.Request[capsule.CreateBuildRequest]) (*connect_go.Response[capsule.CreateBuildResponse], error) {
	return c.createBuild.CallUnary(ctx, req)
}

// ListBuilds calls api.v1.capsule.Service.ListBuilds.
func (c *serviceClient) ListBuilds(ctx context.Context, req *connect_go.Request[capsule.ListBuildsRequest]) (*connect_go.Response[capsule.ListBuildsResponse], error) {
	return c.listBuilds.CallUnary(ctx, req)
}

// DeleteBuild calls api.v1.capsule.Service.DeleteBuild.
func (c *serviceClient) DeleteBuild(ctx context.Context, req *connect_go.Request[capsule.DeleteBuildRequest]) (*connect_go.Response[capsule.DeleteBuildResponse], error) {
	return c.deleteBuild.CallUnary(ctx, req)
}

// Deploy calls api.v1.capsule.Service.Deploy.
func (c *serviceClient) Deploy(ctx context.Context, req *connect_go.Request[capsule.DeployRequest]) (*connect_go.Response[capsule.DeployResponse], error) {
	return c.deploy.CallUnary(ctx, req)
}

// ListInstances calls api.v1.capsule.Service.ListInstances.
func (c *serviceClient) ListInstances(ctx context.Context, req *connect_go.Request[capsule.ListInstancesRequest]) (*connect_go.Response[capsule.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// RestartInstance calls api.v1.capsule.Service.RestartInstance.
func (c *serviceClient) RestartInstance(ctx context.Context, req *connect_go.Request[capsule.RestartInstanceRequest]) (*connect_go.Response[capsule.RestartInstanceResponse], error) {
	return c.restartInstance.CallUnary(ctx, req)
}

// GetRollout calls api.v1.capsule.Service.GetRollout.
func (c *serviceClient) GetRollout(ctx context.Context, req *connect_go.Request[capsule.GetRolloutRequest]) (*connect_go.Response[capsule.GetRolloutResponse], error) {
	return c.getRollout.CallUnary(ctx, req)
}

// ListRollouts calls api.v1.capsule.Service.ListRollouts.
func (c *serviceClient) ListRollouts(ctx context.Context, req *connect_go.Request[capsule.ListRolloutsRequest]) (*connect_go.Response[capsule.ListRolloutsResponse], error) {
	return c.listRollouts.CallUnary(ctx, req)
}

// AbortRollout calls api.v1.capsule.Service.AbortRollout.
func (c *serviceClient) AbortRollout(ctx context.Context, req *connect_go.Request[capsule.AbortRolloutRequest]) (*connect_go.Response[capsule.AbortRolloutResponse], error) {
	return c.abortRollout.CallUnary(ctx, req)
}

// ListEvents calls api.v1.capsule.Service.ListEvents.
func (c *serviceClient) ListEvents(ctx context.Context, req *connect_go.Request[capsule.ListEventsRequest]) (*connect_go.Response[capsule.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// CapsuleMetrics calls api.v1.capsule.Service.CapsuleMetrics.
func (c *serviceClient) CapsuleMetrics(ctx context.Context, req *connect_go.Request[capsule.CapsuleMetricsRequest]) (*connect_go.Response[capsule.CapsuleMetricsResponse], error) {
	return c.capsuleMetrics.CallUnary(ctx, req)
}

// GetInstanceStatus calls api.v1.capsule.Service.GetInstanceStatus.
func (c *serviceClient) GetInstanceStatus(ctx context.Context, req *connect_go.Request[capsule.GetInstanceStatusRequest]) (*connect_go.Response[capsule.GetInstanceStatusResponse], error) {
	return c.getInstanceStatus.CallUnary(ctx, req)
}

// ListInstanceStatuses calls api.v1.capsule.Service.ListInstanceStatuses.
func (c *serviceClient) ListInstanceStatuses(ctx context.Context, req *connect_go.Request[capsule.ListInstanceStatusesRequest]) (*connect_go.Response[capsule.ListInstanceStatusesResponse], error) {
	return c.listInstanceStatuses.CallUnary(ctx, req)
}

// Execute calls api.v1.capsule.Service.Execute.
func (c *serviceClient) Execute(ctx context.Context) *connect_go.BidiStreamForClient[capsule.ExecuteRequest, capsule.ExecuteResponse] {
	return c.execute.CallBidiStream(ctx)
}

// GetCustomInstanceMetrics calls api.v1.capsule.Service.GetCustomInstanceMetrics.
func (c *serviceClient) GetCustomInstanceMetrics(ctx context.Context, req *connect_go.Request[capsule.GetCustomInstanceMetricsRequest]) (*connect_go.Response[capsule.GetCustomInstanceMetricsResponse], error) {
	return c.getCustomInstanceMetrics.CallUnary(ctx, req)
}

// GetJobExecutions calls api.v1.capsule.Service.GetJobExecutions.
func (c *serviceClient) GetJobExecutions(ctx context.Context, req *connect_go.Request[capsule.GetJobExecutionsRequest]) (*connect_go.Response[capsule.GetJobExecutionsResponse], error) {
	return c.getJobExecutions.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.capsule.Service service.
type ServiceHandler interface {
	// Create a new capsule.
	Create(context.Context, *connect_go.Request[capsule.CreateRequest]) (*connect_go.Response[capsule.CreateResponse], error)
	// Get a capsule by id.
	Get(context.Context, *connect_go.Request[capsule.GetRequest]) (*connect_go.Response[capsule.GetResponse], error)
	// Delete a capsule.
	Delete(context.Context, *connect_go.Request[capsule.DeleteRequest]) (*connect_go.Response[capsule.DeleteResponse], error)
	// Logs returns (and streams) the log output of a capsule.
	Logs(context.Context, *connect_go.Request[capsule.LogsRequest], *connect_go.ServerStream[capsule.LogsResponse]) error
	// Update a capsule.
	Update(context.Context, *connect_go.Request[capsule.UpdateRequest]) (*connect_go.Response[capsule.UpdateResponse], error)
	// Lists all capsules for current project.
	List(context.Context, *connect_go.Request[capsule.ListRequest]) (*connect_go.Response[capsule.ListResponse], error)
	// Create a new build.
	// Builds are immutable and cannot change. Create a new build to make
	// changes from an existing one.
	CreateBuild(context.Context, *connect_go.Request[capsule.CreateBuildRequest]) (*connect_go.Response[capsule.CreateBuildResponse], error)
	// List builds for a capsule.
	ListBuilds(context.Context, *connect_go.Request[capsule.ListBuildsRequest]) (*connect_go.Response[capsule.ListBuildsResponse], error)
	// Delete a build.
	DeleteBuild(context.Context, *connect_go.Request[capsule.DeleteBuildRequest]) (*connect_go.Response[capsule.DeleteBuildResponse], error)
	// Deploy changes to a capsule.
	// When deploying, a new rollout will be initiated. Only one rollout can be
	// running at a single point in time.
	// Use `Abort` to abort an already running rollout.
	Deploy(context.Context, *connect_go.Request[capsule.DeployRequest]) (*connect_go.Response[capsule.DeployResponse], error)
	// Lists all instances for the capsule.
	ListInstances(context.Context, *connect_go.Request[capsule.ListInstancesRequest]) (*connect_go.Response[capsule.ListInstancesResponse], error)
	// Restart a single capsule instance.
	RestartInstance(context.Context, *connect_go.Request[capsule.RestartInstanceRequest]) (*connect_go.Response[capsule.RestartInstanceResponse], error)
	// Get a single rollout by ID.
	GetRollout(context.Context, *connect_go.Request[capsule.GetRolloutRequest]) (*connect_go.Response[capsule.GetRolloutResponse], error)
	// Lists all rollouts for the capsule.
	ListRollouts(context.Context, *connect_go.Request[capsule.ListRolloutsRequest]) (*connect_go.Response[capsule.ListRolloutsResponse], error)
	// Abort the rollout.
	AbortRollout(context.Context, *connect_go.Request[capsule.AbortRolloutRequest]) (*connect_go.Response[capsule.AbortRolloutResponse], error)
	ListEvents(context.Context, *connect_go.Request[capsule.ListEventsRequest]) (*connect_go.Response[capsule.ListEventsResponse], error)
	// Get metrics for a capsule
	CapsuleMetrics(context.Context, *connect_go.Request[capsule.CapsuleMetricsRequest]) (*connect_go.Response[capsule.CapsuleMetricsResponse], error)
	// GetInstanceStatus returns the current status for the given instance
	GetInstanceStatus(context.Context, *connect_go.Request[capsule.GetInstanceStatusRequest]) (*connect_go.Response[capsule.GetInstanceStatusResponse], error)
	// ListInstanceStatuses lists the status of all instances.
	ListInstanceStatuses(context.Context, *connect_go.Request[capsule.ListInstanceStatusesRequest]) (*connect_go.Response[capsule.ListInstanceStatusesResponse], error)
	// Execute executes a command in a given in instance,
	// and returns the output along with an exit code.
	Execute(context.Context, *connect_go.BidiStream[capsule.ExecuteRequest, capsule.ExecuteResponse]) error
	GetCustomInstanceMetrics(context.Context, *connect_go.Request[capsule.GetCustomInstanceMetricsRequest]) (*connect_go.Response[capsule.GetCustomInstanceMetricsResponse], error)
	GetJobExecutions(context.Context, *connect_go.Request[capsule.GetJobExecutionsRequest]) (*connect_go.Response[capsule.GetJobExecutionsResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceGetHandler := connect_go.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	serviceLogsHandler := connect_go.NewServerStreamHandler(
		ServiceLogsProcedure,
		svc.Logs,
		opts...,
	)
	serviceUpdateHandler := connect_go.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	serviceListHandler := connect_go.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		opts...,
	)
	serviceCreateBuildHandler := connect_go.NewUnaryHandler(
		ServiceCreateBuildProcedure,
		svc.CreateBuild,
		opts...,
	)
	serviceListBuildsHandler := connect_go.NewUnaryHandler(
		ServiceListBuildsProcedure,
		svc.ListBuilds,
		opts...,
	)
	serviceDeleteBuildHandler := connect_go.NewUnaryHandler(
		ServiceDeleteBuildProcedure,
		svc.DeleteBuild,
		opts...,
	)
	serviceDeployHandler := connect_go.NewUnaryHandler(
		ServiceDeployProcedure,
		svc.Deploy,
		opts...,
	)
	serviceListInstancesHandler := connect_go.NewUnaryHandler(
		ServiceListInstancesProcedure,
		svc.ListInstances,
		opts...,
	)
	serviceRestartInstanceHandler := connect_go.NewUnaryHandler(
		ServiceRestartInstanceProcedure,
		svc.RestartInstance,
		opts...,
	)
	serviceGetRolloutHandler := connect_go.NewUnaryHandler(
		ServiceGetRolloutProcedure,
		svc.GetRollout,
		opts...,
	)
	serviceListRolloutsHandler := connect_go.NewUnaryHandler(
		ServiceListRolloutsProcedure,
		svc.ListRollouts,
		opts...,
	)
	serviceAbortRolloutHandler := connect_go.NewUnaryHandler(
		ServiceAbortRolloutProcedure,
		svc.AbortRollout,
		opts...,
	)
	serviceListEventsHandler := connect_go.NewUnaryHandler(
		ServiceListEventsProcedure,
		svc.ListEvents,
		opts...,
	)
	serviceCapsuleMetricsHandler := connect_go.NewUnaryHandler(
		ServiceCapsuleMetricsProcedure,
		svc.CapsuleMetrics,
		opts...,
	)
	serviceGetInstanceStatusHandler := connect_go.NewUnaryHandler(
		ServiceGetInstanceStatusProcedure,
		svc.GetInstanceStatus,
		opts...,
	)
	serviceListInstanceStatusesHandler := connect_go.NewUnaryHandler(
		ServiceListInstanceStatusesProcedure,
		svc.ListInstanceStatuses,
		opts...,
	)
	serviceExecuteHandler := connect_go.NewBidiStreamHandler(
		ServiceExecuteProcedure,
		svc.Execute,
		opts...,
	)
	serviceGetCustomInstanceMetricsHandler := connect_go.NewUnaryHandler(
		ServiceGetCustomInstanceMetricsProcedure,
		svc.GetCustomInstanceMetrics,
		opts...,
	)
	serviceGetJobExecutionsHandler := connect_go.NewUnaryHandler(
		ServiceGetJobExecutionsProcedure,
		svc.GetJobExecutions,
		opts...,
	)
	return "/api.v1.capsule.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceLogsProcedure:
			serviceLogsHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceCreateBuildProcedure:
			serviceCreateBuildHandler.ServeHTTP(w, r)
		case ServiceListBuildsProcedure:
			serviceListBuildsHandler.ServeHTTP(w, r)
		case ServiceDeleteBuildProcedure:
			serviceDeleteBuildHandler.ServeHTTP(w, r)
		case ServiceDeployProcedure:
			serviceDeployHandler.ServeHTTP(w, r)
		case ServiceListInstancesProcedure:
			serviceListInstancesHandler.ServeHTTP(w, r)
		case ServiceRestartInstanceProcedure:
			serviceRestartInstanceHandler.ServeHTTP(w, r)
		case ServiceGetRolloutProcedure:
			serviceGetRolloutHandler.ServeHTTP(w, r)
		case ServiceListRolloutsProcedure:
			serviceListRolloutsHandler.ServeHTTP(w, r)
		case ServiceAbortRolloutProcedure:
			serviceAbortRolloutHandler.ServeHTTP(w, r)
		case ServiceListEventsProcedure:
			serviceListEventsHandler.ServeHTTP(w, r)
		case ServiceCapsuleMetricsProcedure:
			serviceCapsuleMetricsHandler.ServeHTTP(w, r)
		case ServiceGetInstanceStatusProcedure:
			serviceGetInstanceStatusHandler.ServeHTTP(w, r)
		case ServiceListInstanceStatusesProcedure:
			serviceListInstanceStatusesHandler.ServeHTTP(w, r)
		case ServiceExecuteProcedure:
			serviceExecuteHandler.ServeHTTP(w, r)
		case ServiceGetCustomInstanceMetricsProcedure:
			serviceGetCustomInstanceMetricsHandler.ServeHTTP(w, r)
		case ServiceGetJobExecutionsProcedure:
			serviceGetJobExecutionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[capsule.CreateRequest]) (*connect_go.Response[capsule.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect_go.Request[capsule.GetRequest]) (*connect_go.Response[capsule.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Get is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[capsule.DeleteRequest]) (*connect_go.Response[capsule.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) Logs(context.Context, *connect_go.Request[capsule.LogsRequest], *connect_go.ServerStream[capsule.LogsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Logs is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect_go.Request[capsule.UpdateRequest]) (*connect_go.Response[capsule.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect_go.Request[capsule.ListRequest]) (*connect_go.Response[capsule.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) CreateBuild(context.Context, *connect_go.Request[capsule.CreateBuildRequest]) (*connect_go.Response[capsule.CreateBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.CreateBuild is not implemented"))
}

func (UnimplementedServiceHandler) ListBuilds(context.Context, *connect_go.Request[capsule.ListBuildsRequest]) (*connect_go.Response[capsule.ListBuildsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.ListBuilds is not implemented"))
}

func (UnimplementedServiceHandler) DeleteBuild(context.Context, *connect_go.Request[capsule.DeleteBuildRequest]) (*connect_go.Response[capsule.DeleteBuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.DeleteBuild is not implemented"))
}

func (UnimplementedServiceHandler) Deploy(context.Context, *connect_go.Request[capsule.DeployRequest]) (*connect_go.Response[capsule.DeployResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Deploy is not implemented"))
}

func (UnimplementedServiceHandler) ListInstances(context.Context, *connect_go.Request[capsule.ListInstancesRequest]) (*connect_go.Response[capsule.ListInstancesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.ListInstances is not implemented"))
}

func (UnimplementedServiceHandler) RestartInstance(context.Context, *connect_go.Request[capsule.RestartInstanceRequest]) (*connect_go.Response[capsule.RestartInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.RestartInstance is not implemented"))
}

func (UnimplementedServiceHandler) GetRollout(context.Context, *connect_go.Request[capsule.GetRolloutRequest]) (*connect_go.Response[capsule.GetRolloutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.GetRollout is not implemented"))
}

func (UnimplementedServiceHandler) ListRollouts(context.Context, *connect_go.Request[capsule.ListRolloutsRequest]) (*connect_go.Response[capsule.ListRolloutsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.ListRollouts is not implemented"))
}

func (UnimplementedServiceHandler) AbortRollout(context.Context, *connect_go.Request[capsule.AbortRolloutRequest]) (*connect_go.Response[capsule.AbortRolloutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.AbortRollout is not implemented"))
}

func (UnimplementedServiceHandler) ListEvents(context.Context, *connect_go.Request[capsule.ListEventsRequest]) (*connect_go.Response[capsule.ListEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.ListEvents is not implemented"))
}

func (UnimplementedServiceHandler) CapsuleMetrics(context.Context, *connect_go.Request[capsule.CapsuleMetricsRequest]) (*connect_go.Response[capsule.CapsuleMetricsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.CapsuleMetrics is not implemented"))
}

func (UnimplementedServiceHandler) GetInstanceStatus(context.Context, *connect_go.Request[capsule.GetInstanceStatusRequest]) (*connect_go.Response[capsule.GetInstanceStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.GetInstanceStatus is not implemented"))
}

func (UnimplementedServiceHandler) ListInstanceStatuses(context.Context, *connect_go.Request[capsule.ListInstanceStatusesRequest]) (*connect_go.Response[capsule.ListInstanceStatusesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.ListInstanceStatuses is not implemented"))
}

func (UnimplementedServiceHandler) Execute(context.Context, *connect_go.BidiStream[capsule.ExecuteRequest, capsule.ExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.Execute is not implemented"))
}

func (UnimplementedServiceHandler) GetCustomInstanceMetrics(context.Context, *connect_go.Request[capsule.GetCustomInstanceMetricsRequest]) (*connect_go.Response[capsule.GetCustomInstanceMetricsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.GetCustomInstanceMetrics is not implemented"))
}

func (UnimplementedServiceHandler) GetJobExecutions(context.Context, *connect_go.Request[capsule.GetJobExecutionsRequest]) (*connect_go.Response[capsule.GetJobExecutionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.capsule.Service.GetJobExecutions is not implemented"))
}
