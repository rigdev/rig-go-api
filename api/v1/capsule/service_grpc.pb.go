// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package capsule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Create a new capsule.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get a capsule by id.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Delete a capsule.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Logs returns (and streams) the log output of a capsule.
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Service_LogsClient, error)
	// Update a capsule.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Lists all capsules for current project.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Deploy changes to a capsule.
	// When deploying, a new rollout will be initiated. Only one rollout can be
	// running at a single point in time.
	// Use `Abort` to abort an already running rollout.
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	DeploySet(ctx context.Context, in *DeploySetRequest, opts ...grpc.CallOption) (*DeploySetResponse, error)
	ProposeRollout(ctx context.Context, in *ProposeRolloutRequest, opts ...grpc.CallOption) (*ProposeRolloutResponse, error)
	ProposeSetRollout(ctx context.Context, in *ProposeSetRolloutRequest, opts ...grpc.CallOption) (*ProposeSetRolloutResponse, error)
	ListProposals(ctx context.Context, in *ListProposalsRequest, opts ...grpc.CallOption) (*ListProposalsResponse, error)
	ListSetProposals(ctx context.Context, in *ListSetProposalsRequest, opts ...grpc.CallOption) (*ListSetProposalsResponse, error)
	// Lists all instances for the capsule.
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// Restart a single capsule instance.
	RestartInstance(ctx context.Context, in *RestartInstanceRequest, opts ...grpc.CallOption) (*RestartInstanceResponse, error)
	// Get a single rollout by ID.
	GetRollout(ctx context.Context, in *GetRolloutRequest, opts ...grpc.CallOption) (*GetRolloutResponse, error)
	// Lists all rollouts for the capsule.
	ListRollouts(ctx context.Context, in *ListRolloutsRequest, opts ...grpc.CallOption) (*ListRolloutsResponse, error)
	// Stream rollouts for a capsule.
	WatchRollouts(ctx context.Context, in *WatchRolloutsRequest, opts ...grpc.CallOption) (Service_WatchRolloutsClient, error)
	// Abort the rollout.
	AbortRollout(ctx context.Context, in *AbortRolloutRequest, opts ...grpc.CallOption) (*AbortRolloutResponse, error)
	// Stop a Rollout, removing all resources associated with it.
	StopRollout(ctx context.Context, in *StopRolloutRequest, opts ...grpc.CallOption) (*StopRolloutResponse, error)
	// List capsule events.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// Get metrics for a capsule
	CapsuleMetrics(ctx context.Context, in *CapsuleMetricsRequest, opts ...grpc.CallOption) (*CapsuleMetricsResponse, error)
	// GetInstanceStatus returns the current status for the given instance.
	GetInstanceStatus(ctx context.Context, in *GetInstanceStatusRequest, opts ...grpc.CallOption) (*GetInstanceStatusResponse, error)
	// ListInstanceStatuses lists the status of all instances.
	ListInstanceStatuses(ctx context.Context, in *ListInstanceStatusesRequest, opts ...grpc.CallOption) (*ListInstanceStatusesResponse, error)
	// Stream Instance Statuses of a capsule.
	WatchInstanceStatuses(ctx context.Context, in *WatchInstanceStatusesRequest, opts ...grpc.CallOption) (Service_WatchInstanceStatusesClient, error)
	// Execute executes a command in a given in instance,
	// and returns the output along with an exit code.
	Execute(ctx context.Context, opts ...grpc.CallOption) (Service_ExecuteClient, error)
	// PortForward establishes a port-forwarding for the port to the given
	// instance.
	PortForward(ctx context.Context, opts ...grpc.CallOption) (Service_PortForwardClient, error)
	GetCustomInstanceMetrics(ctx context.Context, in *GetCustomInstanceMetricsRequest, opts ...grpc.CallOption) (*GetCustomInstanceMetricsResponse, error)
	// Get list of job executions performed by the Capsule.
	GetJobExecutions(ctx context.Context, in *GetJobExecutionsRequest, opts ...grpc.CallOption) (*GetJobExecutionsResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*GetRevisionResponse, error)
	GetRolloutOfRevisions(ctx context.Context, in *GetRolloutOfRevisionsRequest, opts ...grpc.CallOption) (*GetRolloutOfRevisionsResponse, error)
	// Stream the status of a capsule.
	WatchStatus(ctx context.Context, in *WatchStatusRequest, opts ...grpc.CallOption) (Service_WatchStatusClient, error)
	GetEffectiveGitSettings(ctx context.Context, in *GetEffectiveGitSettingsRequest, opts ...grpc.CallOption) (*GetEffectiveGitSettingsResponse, error)
	// Will initiate the pipeline, from the initial environment and it's current
	// rollout.
	StartPipeline(ctx context.Context, in *StartPipelineRequest, opts ...grpc.CallOption) (*StartPipelineResponse, error)
	GetPipelineStatus(ctx context.Context, in *GetPipelineStatusRequest, opts ...grpc.CallOption) (*GetPipelineStatusResponse, error)
	// Progress the pipeline to the next environment.
	ProgressPipeline(ctx context.Context, in *ProgressPipelineRequest, opts ...grpc.CallOption) (*ProgressPipelineResponse, error)
	// Abort the pipeline execution. This will stop the pipeline from any further
	// promotions.
	AbortPipeline(ctx context.Context, in *AbortPipelineRequest, opts ...grpc.CallOption) (*AbortPipelineResponse, error)
	ListPipelineStatuses(ctx context.Context, in *ListPipelineStatusesRequest, opts ...grpc.CallOption) (*ListPipelineStatusesResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Service_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/api.v1.capsule.Service/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_LogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type serviceLogsClient struct {
	grpc.ClientStream
}

func (x *serviceLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeploySet(ctx context.Context, in *DeploySetRequest, opts ...grpc.CallOption) (*DeploySetResponse, error) {
	out := new(DeploySetResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/DeploySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ProposeRollout(ctx context.Context, in *ProposeRolloutRequest, opts ...grpc.CallOption) (*ProposeRolloutResponse, error) {
	out := new(ProposeRolloutResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ProposeRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ProposeSetRollout(ctx context.Context, in *ProposeSetRolloutRequest, opts ...grpc.CallOption) (*ProposeSetRolloutResponse, error) {
	out := new(ProposeSetRolloutResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ProposeSetRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListProposals(ctx context.Context, in *ListProposalsRequest, opts ...grpc.CallOption) (*ListProposalsResponse, error) {
	out := new(ListProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListSetProposals(ctx context.Context, in *ListSetProposalsRequest, opts ...grpc.CallOption) (*ListSetProposalsResponse, error) {
	out := new(ListSetProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListSetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RestartInstance(ctx context.Context, in *RestartInstanceRequest, opts ...grpc.CallOption) (*RestartInstanceResponse, error) {
	out := new(RestartInstanceResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/RestartInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetRollout(ctx context.Context, in *GetRolloutRequest, opts ...grpc.CallOption) (*GetRolloutResponse, error) {
	out := new(GetRolloutResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListRollouts(ctx context.Context, in *ListRolloutsRequest, opts ...grpc.CallOption) (*ListRolloutsResponse, error) {
	out := new(ListRolloutsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListRollouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WatchRollouts(ctx context.Context, in *WatchRolloutsRequest, opts ...grpc.CallOption) (Service_WatchRolloutsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], "/api.v1.capsule.Service/WatchRollouts", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceWatchRolloutsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_WatchRolloutsClient interface {
	Recv() (*WatchRolloutsResponse, error)
	grpc.ClientStream
}

type serviceWatchRolloutsClient struct {
	grpc.ClientStream
}

func (x *serviceWatchRolloutsClient) Recv() (*WatchRolloutsResponse, error) {
	m := new(WatchRolloutsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) AbortRollout(ctx context.Context, in *AbortRolloutRequest, opts ...grpc.CallOption) (*AbortRolloutResponse, error) {
	out := new(AbortRolloutResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/AbortRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) StopRollout(ctx context.Context, in *StopRolloutRequest, opts ...grpc.CallOption) (*StopRolloutResponse, error) {
	out := new(StopRolloutResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/StopRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CapsuleMetrics(ctx context.Context, in *CapsuleMetricsRequest, opts ...grpc.CallOption) (*CapsuleMetricsResponse, error) {
	out := new(CapsuleMetricsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/CapsuleMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetInstanceStatus(ctx context.Context, in *GetInstanceStatusRequest, opts ...grpc.CallOption) (*GetInstanceStatusResponse, error) {
	out := new(GetInstanceStatusResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetInstanceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListInstanceStatuses(ctx context.Context, in *ListInstanceStatusesRequest, opts ...grpc.CallOption) (*ListInstanceStatusesResponse, error) {
	out := new(ListInstanceStatusesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListInstanceStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WatchInstanceStatuses(ctx context.Context, in *WatchInstanceStatusesRequest, opts ...grpc.CallOption) (Service_WatchInstanceStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[2], "/api.v1.capsule.Service/WatchInstanceStatuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceWatchInstanceStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_WatchInstanceStatusesClient interface {
	Recv() (*WatchInstanceStatusesResponse, error)
	grpc.ClientStream
}

type serviceWatchInstanceStatusesClient struct {
	grpc.ClientStream
}

func (x *serviceWatchInstanceStatusesClient) Recv() (*WatchInstanceStatusesResponse, error) {
	m := new(WatchInstanceStatusesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Execute(ctx context.Context, opts ...grpc.CallOption) (Service_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[3], "/api.v1.capsule.Service/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceExecuteClient{stream}
	return x, nil
}

type Service_ExecuteClient interface {
	Send(*ExecuteRequest) error
	Recv() (*ExecuteResponse, error)
	grpc.ClientStream
}

type serviceExecuteClient struct {
	grpc.ClientStream
}

func (x *serviceExecuteClient) Send(m *ExecuteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceExecuteClient) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) PortForward(ctx context.Context, opts ...grpc.CallOption) (Service_PortForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[4], "/api.v1.capsule.Service/PortForward", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePortForwardClient{stream}
	return x, nil
}

type Service_PortForwardClient interface {
	Send(*PortForwardRequest) error
	Recv() (*PortForwardResponse, error)
	grpc.ClientStream
}

type servicePortForwardClient struct {
	grpc.ClientStream
}

func (x *servicePortForwardClient) Send(m *PortForwardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicePortForwardClient) Recv() (*PortForwardResponse, error) {
	m := new(PortForwardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetCustomInstanceMetrics(ctx context.Context, in *GetCustomInstanceMetricsRequest, opts ...grpc.CallOption) (*GetCustomInstanceMetricsResponse, error) {
	out := new(GetCustomInstanceMetricsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetCustomInstanceMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetJobExecutions(ctx context.Context, in *GetJobExecutionsRequest, opts ...grpc.CallOption) (*GetJobExecutionsResponse, error) {
	out := new(GetJobExecutionsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetJobExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*GetRevisionResponse, error) {
	out := new(GetRevisionResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetRolloutOfRevisions(ctx context.Context, in *GetRolloutOfRevisionsRequest, opts ...grpc.CallOption) (*GetRolloutOfRevisionsResponse, error) {
	out := new(GetRolloutOfRevisionsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetRolloutOfRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WatchStatus(ctx context.Context, in *WatchStatusRequest, opts ...grpc.CallOption) (Service_WatchStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[5], "/api.v1.capsule.Service/WatchStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceWatchStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_WatchStatusClient interface {
	Recv() (*WatchStatusResponse, error)
	grpc.ClientStream
}

type serviceWatchStatusClient struct {
	grpc.ClientStream
}

func (x *serviceWatchStatusClient) Recv() (*WatchStatusResponse, error) {
	m := new(WatchStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetEffectiveGitSettings(ctx context.Context, in *GetEffectiveGitSettingsRequest, opts ...grpc.CallOption) (*GetEffectiveGitSettingsResponse, error) {
	out := new(GetEffectiveGitSettingsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetEffectiveGitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) StartPipeline(ctx context.Context, in *StartPipelineRequest, opts ...grpc.CallOption) (*StartPipelineResponse, error) {
	out := new(StartPipelineResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/StartPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPipelineStatus(ctx context.Context, in *GetPipelineStatusRequest, opts ...grpc.CallOption) (*GetPipelineStatusResponse, error) {
	out := new(GetPipelineStatusResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/GetPipelineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ProgressPipeline(ctx context.Context, in *ProgressPipelineRequest, opts ...grpc.CallOption) (*ProgressPipelineResponse, error) {
	out := new(ProgressPipelineResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ProgressPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AbortPipeline(ctx context.Context, in *AbortPipelineRequest, opts ...grpc.CallOption) (*AbortPipelineResponse, error) {
	out := new(AbortPipelineResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/AbortPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListPipelineStatuses(ctx context.Context, in *ListPipelineStatusesRequest, opts ...grpc.CallOption) (*ListPipelineStatusesResponse, error) {
	out := new(ListPipelineStatusesResponse)
	err := c.cc.Invoke(ctx, "/api.v1.capsule.Service/ListPipelineStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Create a new capsule.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get a capsule by id.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Delete a capsule.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Logs returns (and streams) the log output of a capsule.
	Logs(*LogsRequest, Service_LogsServer) error
	// Update a capsule.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Lists all capsules for current project.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Deploy changes to a capsule.
	// When deploying, a new rollout will be initiated. Only one rollout can be
	// running at a single point in time.
	// Use `Abort` to abort an already running rollout.
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	DeploySet(context.Context, *DeploySetRequest) (*DeploySetResponse, error)
	ProposeRollout(context.Context, *ProposeRolloutRequest) (*ProposeRolloutResponse, error)
	ProposeSetRollout(context.Context, *ProposeSetRolloutRequest) (*ProposeSetRolloutResponse, error)
	ListProposals(context.Context, *ListProposalsRequest) (*ListProposalsResponse, error)
	ListSetProposals(context.Context, *ListSetProposalsRequest) (*ListSetProposalsResponse, error)
	// Lists all instances for the capsule.
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// Restart a single capsule instance.
	RestartInstance(context.Context, *RestartInstanceRequest) (*RestartInstanceResponse, error)
	// Get a single rollout by ID.
	GetRollout(context.Context, *GetRolloutRequest) (*GetRolloutResponse, error)
	// Lists all rollouts for the capsule.
	ListRollouts(context.Context, *ListRolloutsRequest) (*ListRolloutsResponse, error)
	// Stream rollouts for a capsule.
	WatchRollouts(*WatchRolloutsRequest, Service_WatchRolloutsServer) error
	// Abort the rollout.
	AbortRollout(context.Context, *AbortRolloutRequest) (*AbortRolloutResponse, error)
	// Stop a Rollout, removing all resources associated with it.
	StopRollout(context.Context, *StopRolloutRequest) (*StopRolloutResponse, error)
	// List capsule events.
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// Get metrics for a capsule
	CapsuleMetrics(context.Context, *CapsuleMetricsRequest) (*CapsuleMetricsResponse, error)
	// GetInstanceStatus returns the current status for the given instance.
	GetInstanceStatus(context.Context, *GetInstanceStatusRequest) (*GetInstanceStatusResponse, error)
	// ListInstanceStatuses lists the status of all instances.
	ListInstanceStatuses(context.Context, *ListInstanceStatusesRequest) (*ListInstanceStatusesResponse, error)
	// Stream Instance Statuses of a capsule.
	WatchInstanceStatuses(*WatchInstanceStatusesRequest, Service_WatchInstanceStatusesServer) error
	// Execute executes a command in a given in instance,
	// and returns the output along with an exit code.
	Execute(Service_ExecuteServer) error
	// PortForward establishes a port-forwarding for the port to the given
	// instance.
	PortForward(Service_PortForwardServer) error
	GetCustomInstanceMetrics(context.Context, *GetCustomInstanceMetricsRequest) (*GetCustomInstanceMetricsResponse, error)
	// Get list of job executions performed by the Capsule.
	GetJobExecutions(context.Context, *GetJobExecutionsRequest) (*GetJobExecutionsResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	GetRevision(context.Context, *GetRevisionRequest) (*GetRevisionResponse, error)
	GetRolloutOfRevisions(context.Context, *GetRolloutOfRevisionsRequest) (*GetRolloutOfRevisionsResponse, error)
	// Stream the status of a capsule.
	WatchStatus(*WatchStatusRequest, Service_WatchStatusServer) error
	GetEffectiveGitSettings(context.Context, *GetEffectiveGitSettingsRequest) (*GetEffectiveGitSettingsResponse, error)
	// Will initiate the pipeline, from the initial environment and it's current
	// rollout.
	StartPipeline(context.Context, *StartPipelineRequest) (*StartPipelineResponse, error)
	GetPipelineStatus(context.Context, *GetPipelineStatusRequest) (*GetPipelineStatusResponse, error)
	// Progress the pipeline to the next environment.
	ProgressPipeline(context.Context, *ProgressPipelineRequest) (*ProgressPipelineResponse, error)
	// Abort the pipeline execution. This will stop the pipeline from any further
	// promotions.
	AbortPipeline(context.Context, *AbortPipelineRequest) (*AbortPipelineResponse, error)
	ListPipelineStatuses(context.Context, *ListPipelineStatusesRequest) (*ListPipelineStatusesResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceServer) Logs(*LogsRequest, Service_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedServiceServer) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedServiceServer) DeploySet(context.Context, *DeploySetRequest) (*DeploySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploySet not implemented")
}
func (UnimplementedServiceServer) ProposeRollout(context.Context, *ProposeRolloutRequest) (*ProposeRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeRollout not implemented")
}
func (UnimplementedServiceServer) ProposeSetRollout(context.Context, *ProposeSetRolloutRequest) (*ProposeSetRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSetRollout not implemented")
}
func (UnimplementedServiceServer) ListProposals(context.Context, *ListProposalsRequest) (*ListProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposals not implemented")
}
func (UnimplementedServiceServer) ListSetProposals(context.Context, *ListSetProposalsRequest) (*ListSetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSetProposals not implemented")
}
func (UnimplementedServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedServiceServer) RestartInstance(context.Context, *RestartInstanceRequest) (*RestartInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartInstance not implemented")
}
func (UnimplementedServiceServer) GetRollout(context.Context, *GetRolloutRequest) (*GetRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollout not implemented")
}
func (UnimplementedServiceServer) ListRollouts(context.Context, *ListRolloutsRequest) (*ListRolloutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRollouts not implemented")
}
func (UnimplementedServiceServer) WatchRollouts(*WatchRolloutsRequest, Service_WatchRolloutsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRollouts not implemented")
}
func (UnimplementedServiceServer) AbortRollout(context.Context, *AbortRolloutRequest) (*AbortRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRollout not implemented")
}
func (UnimplementedServiceServer) StopRollout(context.Context, *StopRolloutRequest) (*StopRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRollout not implemented")
}
func (UnimplementedServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedServiceServer) CapsuleMetrics(context.Context, *CapsuleMetricsRequest) (*CapsuleMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapsuleMetrics not implemented")
}
func (UnimplementedServiceServer) GetInstanceStatus(context.Context, *GetInstanceStatusRequest) (*GetInstanceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceStatus not implemented")
}
func (UnimplementedServiceServer) ListInstanceStatuses(context.Context, *ListInstanceStatusesRequest) (*ListInstanceStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceStatuses not implemented")
}
func (UnimplementedServiceServer) WatchInstanceStatuses(*WatchInstanceStatusesRequest, Service_WatchInstanceStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchInstanceStatuses not implemented")
}
func (UnimplementedServiceServer) Execute(Service_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedServiceServer) PortForward(Service_PortForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method PortForward not implemented")
}
func (UnimplementedServiceServer) GetCustomInstanceMetrics(context.Context, *GetCustomInstanceMetricsRequest) (*GetCustomInstanceMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInstanceMetrics not implemented")
}
func (UnimplementedServiceServer) GetJobExecutions(context.Context, *GetJobExecutionsRequest) (*GetJobExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobExecutions not implemented")
}
func (UnimplementedServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedServiceServer) GetRevision(context.Context, *GetRevisionRequest) (*GetRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedServiceServer) GetRolloutOfRevisions(context.Context, *GetRolloutOfRevisionsRequest) (*GetRolloutOfRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolloutOfRevisions not implemented")
}
func (UnimplementedServiceServer) WatchStatus(*WatchStatusRequest, Service_WatchStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchStatus not implemented")
}
func (UnimplementedServiceServer) GetEffectiveGitSettings(context.Context, *GetEffectiveGitSettingsRequest) (*GetEffectiveGitSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveGitSettings not implemented")
}
func (UnimplementedServiceServer) StartPipeline(context.Context, *StartPipelineRequest) (*StartPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPipeline not implemented")
}
func (UnimplementedServiceServer) GetPipelineStatus(context.Context, *GetPipelineStatusRequest) (*GetPipelineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineStatus not implemented")
}
func (UnimplementedServiceServer) ProgressPipeline(context.Context, *ProgressPipelineRequest) (*ProgressPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProgressPipeline not implemented")
}
func (UnimplementedServiceServer) AbortPipeline(context.Context, *AbortPipelineRequest) (*AbortPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortPipeline not implemented")
}
func (UnimplementedServiceServer) ListPipelineStatuses(context.Context, *ListPipelineStatusesRequest) (*ListPipelineStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineStatuses not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Logs(m, &serviceLogsServer{stream})
}

type Service_LogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type serviceLogsServer struct {
	grpc.ServerStream
}

func (x *serviceLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeploySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeploySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/DeploySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeploySet(ctx, req.(*DeploySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ProposeRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ProposeRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ProposeRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ProposeRollout(ctx, req.(*ProposeRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ProposeSetRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeSetRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ProposeSetRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ProposeSetRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ProposeSetRollout(ctx, req.(*ProposeSetRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListProposals(ctx, req.(*ListProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListSetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListSetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListSetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListSetProposals(ctx, req.(*ListSetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RestartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RestartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/RestartInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RestartInstance(ctx, req.(*RestartInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetRollout(ctx, req.(*GetRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListRollouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolloutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListRollouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListRollouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListRollouts(ctx, req.(*ListRolloutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WatchRollouts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRolloutsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).WatchRollouts(m, &serviceWatchRolloutsServer{stream})
}

type Service_WatchRolloutsServer interface {
	Send(*WatchRolloutsResponse) error
	grpc.ServerStream
}

type serviceWatchRolloutsServer struct {
	grpc.ServerStream
}

func (x *serviceWatchRolloutsServer) Send(m *WatchRolloutsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_AbortRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AbortRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/AbortRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AbortRollout(ctx, req.(*AbortRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_StopRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).StopRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/StopRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).StopRollout(ctx, req.(*StopRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CapsuleMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapsuleMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CapsuleMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/CapsuleMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CapsuleMetrics(ctx, req.(*CapsuleMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetInstanceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetInstanceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetInstanceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetInstanceStatus(ctx, req.(*GetInstanceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListInstanceStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListInstanceStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListInstanceStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListInstanceStatuses(ctx, req.(*ListInstanceStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WatchInstanceStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchInstanceStatusesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).WatchInstanceStatuses(m, &serviceWatchInstanceStatusesServer{stream})
}

type Service_WatchInstanceStatusesServer interface {
	Send(*WatchInstanceStatusesResponse) error
	grpc.ServerStream
}

type serviceWatchInstanceStatusesServer struct {
	grpc.ServerStream
}

func (x *serviceWatchInstanceStatusesServer) Send(m *WatchInstanceStatusesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Execute(&serviceExecuteServer{stream})
}

type Service_ExecuteServer interface {
	Send(*ExecuteResponse) error
	Recv() (*ExecuteRequest, error)
	grpc.ServerStream
}

type serviceExecuteServer struct {
	grpc.ServerStream
}

func (x *serviceExecuteServer) Send(m *ExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceExecuteServer) Recv() (*ExecuteRequest, error) {
	m := new(ExecuteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_PortForward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).PortForward(&servicePortForwardServer{stream})
}

type Service_PortForwardServer interface {
	Send(*PortForwardResponse) error
	Recv() (*PortForwardRequest, error)
	grpc.ServerStream
}

type servicePortForwardServer struct {
	grpc.ServerStream
}

func (x *servicePortForwardServer) Send(m *PortForwardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicePortForwardServer) Recv() (*PortForwardRequest, error) {
	m := new(PortForwardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_GetCustomInstanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInstanceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetCustomInstanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetCustomInstanceMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetCustomInstanceMetrics(ctx, req.(*GetCustomInstanceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetJobExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetJobExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetJobExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetJobExecutions(ctx, req.(*GetJobExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetRolloutOfRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolloutOfRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetRolloutOfRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetRolloutOfRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetRolloutOfRevisions(ctx, req.(*GetRolloutOfRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WatchStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).WatchStatus(m, &serviceWatchStatusServer{stream})
}

type Service_WatchStatusServer interface {
	Send(*WatchStatusResponse) error
	grpc.ServerStream
}

type serviceWatchStatusServer struct {
	grpc.ServerStream
}

func (x *serviceWatchStatusServer) Send(m *WatchStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetEffectiveGitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveGitSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetEffectiveGitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetEffectiveGitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetEffectiveGitSettings(ctx, req.(*GetEffectiveGitSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_StartPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).StartPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/StartPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).StartPipeline(ctx, req.(*StartPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPipelineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPipelineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/GetPipelineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPipelineStatus(ctx, req.(*GetPipelineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ProgressPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ProgressPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ProgressPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ProgressPipeline(ctx, req.(*ProgressPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AbortPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AbortPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/AbortPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AbortPipeline(ctx, req.(*AbortPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListPipelineStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListPipelineStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.capsule.Service/ListPipelineStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListPipelineStatuses(ctx, req.(*ListPipelineStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.capsule.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Service_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Service_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Service_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Service_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Service_List_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Service_Deploy_Handler,
		},
		{
			MethodName: "DeploySet",
			Handler:    _Service_DeploySet_Handler,
		},
		{
			MethodName: "ProposeRollout",
			Handler:    _Service_ProposeRollout_Handler,
		},
		{
			MethodName: "ProposeSetRollout",
			Handler:    _Service_ProposeSetRollout_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _Service_ListProposals_Handler,
		},
		{
			MethodName: "ListSetProposals",
			Handler:    _Service_ListSetProposals_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _Service_ListInstances_Handler,
		},
		{
			MethodName: "RestartInstance",
			Handler:    _Service_RestartInstance_Handler,
		},
		{
			MethodName: "GetRollout",
			Handler:    _Service_GetRollout_Handler,
		},
		{
			MethodName: "ListRollouts",
			Handler:    _Service_ListRollouts_Handler,
		},
		{
			MethodName: "AbortRollout",
			Handler:    _Service_AbortRollout_Handler,
		},
		{
			MethodName: "StopRollout",
			Handler:    _Service_StopRollout_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Service_ListEvents_Handler,
		},
		{
			MethodName: "CapsuleMetrics",
			Handler:    _Service_CapsuleMetrics_Handler,
		},
		{
			MethodName: "GetInstanceStatus",
			Handler:    _Service_GetInstanceStatus_Handler,
		},
		{
			MethodName: "ListInstanceStatuses",
			Handler:    _Service_ListInstanceStatuses_Handler,
		},
		{
			MethodName: "GetCustomInstanceMetrics",
			Handler:    _Service_GetCustomInstanceMetrics_Handler,
		},
		{
			MethodName: "GetJobExecutions",
			Handler:    _Service_GetJobExecutions_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Service_GetStatus_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _Service_GetRevision_Handler,
		},
		{
			MethodName: "GetRolloutOfRevisions",
			Handler:    _Service_GetRolloutOfRevisions_Handler,
		},
		{
			MethodName: "GetEffectiveGitSettings",
			Handler:    _Service_GetEffectiveGitSettings_Handler,
		},
		{
			MethodName: "StartPipeline",
			Handler:    _Service_StartPipeline_Handler,
		},
		{
			MethodName: "GetPipelineStatus",
			Handler:    _Service_GetPipelineStatus_Handler,
		},
		{
			MethodName: "ProgressPipeline",
			Handler:    _Service_ProgressPipeline_Handler,
		},
		{
			MethodName: "AbortPipeline",
			Handler:    _Service_AbortPipeline_Handler,
		},
		{
			MethodName: "ListPipelineStatuses",
			Handler:    _Service_ListPipelineStatuses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Service_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchRollouts",
			Handler:       _Service_WatchRollouts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchInstanceStatuses",
			Handler:       _Service_WatchInstanceStatuses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Execute",
			Handler:       _Service_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PortForward",
			Handler:       _Service_PortForward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchStatus",
			Handler:       _Service_WatchStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/capsule/service.proto",
}
