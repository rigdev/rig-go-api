// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/environment/service.proto

package environmentconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	environment "github.com/rigdev/rig-go-api/api/v1/environment"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.environment.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.environment.Service/Create"
	// ServiceUpdateProcedure is the fully-qualified name of the Service's Update RPC.
	ServiceUpdateProcedure = "/api.v1.environment.Service/Update"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.environment.Service/Delete"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.environment.Service/List"
	// ServiceGetNamespacesProcedure is the fully-qualified name of the Service's GetNamespaces RPC.
	ServiceGetNamespacesProcedure = "/api.v1.environment.Service/GetNamespaces"
	// ServiceGetProcedure is the fully-qualified name of the Service's Get RPC.
	ServiceGetProcedure = "/api.v1.environment.Service/Get"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceServiceDescriptor             = environment.File_api_v1_environment_service_proto.Services().ByName("Service")
	serviceCreateMethodDescriptor        = serviceServiceDescriptor.Methods().ByName("Create")
	serviceUpdateMethodDescriptor        = serviceServiceDescriptor.Methods().ByName("Update")
	serviceDeleteMethodDescriptor        = serviceServiceDescriptor.Methods().ByName("Delete")
	serviceListMethodDescriptor          = serviceServiceDescriptor.Methods().ByName("List")
	serviceGetNamespacesMethodDescriptor = serviceServiceDescriptor.Methods().ByName("GetNamespaces")
	serviceGetMethodDescriptor           = serviceServiceDescriptor.Methods().ByName("Get")
)

// ServiceClient is a client for the api.v1.environment.Service service.
type ServiceClient interface {
	Create(context.Context, *connect.Request[environment.CreateRequest]) (*connect.Response[environment.CreateResponse], error)
	Update(context.Context, *connect.Request[environment.UpdateRequest]) (*connect.Response[environment.UpdateResponse], error)
	Delete(context.Context, *connect.Request[environment.DeleteRequest]) (*connect.Response[environment.DeleteResponse], error)
	// List available environments.
	List(context.Context, *connect.Request[environment.ListRequest]) (*connect.Response[environment.ListResponse], error)
	GetNamespaces(context.Context, *connect.Request[environment.GetNamespacesRequest]) (*connect.Response[environment.GetNamespacesResponse], error)
	Get(context.Context, *connect.Request[environment.GetRequest]) (*connect.Response[environment.GetResponse], error)
}

// NewServiceClient constructs a client for the api.v1.environment.Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect.NewClient[environment.CreateRequest, environment.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			connect.WithSchema(serviceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[environment.UpdateRequest, environment.UpdateResponse](
			httpClient,
			baseURL+ServiceUpdateProcedure,
			connect.WithSchema(serviceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[environment.DeleteRequest, environment.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			connect.WithSchema(serviceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[environment.ListRequest, environment.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			connect.WithSchema(serviceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNamespaces: connect.NewClient[environment.GetNamespacesRequest, environment.GetNamespacesResponse](
			httpClient,
			baseURL+ServiceGetNamespacesProcedure,
			connect.WithSchema(serviceGetNamespacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[environment.GetRequest, environment.GetResponse](
			httpClient,
			baseURL+ServiceGetProcedure,
			connect.WithSchema(serviceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create        *connect.Client[environment.CreateRequest, environment.CreateResponse]
	update        *connect.Client[environment.UpdateRequest, environment.UpdateResponse]
	delete        *connect.Client[environment.DeleteRequest, environment.DeleteResponse]
	list          *connect.Client[environment.ListRequest, environment.ListResponse]
	getNamespaces *connect.Client[environment.GetNamespacesRequest, environment.GetNamespacesResponse]
	get           *connect.Client[environment.GetRequest, environment.GetResponse]
}

// Create calls api.v1.environment.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect.Request[environment.CreateRequest]) (*connect.Response[environment.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls api.v1.environment.Service.Update.
func (c *serviceClient) Update(ctx context.Context, req *connect.Request[environment.UpdateRequest]) (*connect.Response[environment.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.environment.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect.Request[environment.DeleteRequest]) (*connect.Response[environment.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls api.v1.environment.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect.Request[environment.ListRequest]) (*connect.Response[environment.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// GetNamespaces calls api.v1.environment.Service.GetNamespaces.
func (c *serviceClient) GetNamespaces(ctx context.Context, req *connect.Request[environment.GetNamespacesRequest]) (*connect.Response[environment.GetNamespacesResponse], error) {
	return c.getNamespaces.CallUnary(ctx, req)
}

// Get calls api.v1.environment.Service.Get.
func (c *serviceClient) Get(ctx context.Context, req *connect.Request[environment.GetRequest]) (*connect.Response[environment.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.environment.Service service.
type ServiceHandler interface {
	Create(context.Context, *connect.Request[environment.CreateRequest]) (*connect.Response[environment.CreateResponse], error)
	Update(context.Context, *connect.Request[environment.UpdateRequest]) (*connect.Response[environment.UpdateResponse], error)
	Delete(context.Context, *connect.Request[environment.DeleteRequest]) (*connect.Response[environment.DeleteResponse], error)
	// List available environments.
	List(context.Context, *connect.Request[environment.ListRequest]) (*connect.Response[environment.ListResponse], error)
	GetNamespaces(context.Context, *connect.Request[environment.GetNamespacesRequest]) (*connect.Response[environment.GetNamespacesResponse], error)
	Get(context.Context, *connect.Request[environment.GetRequest]) (*connect.Response[environment.GetResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(serviceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceUpdateHandler := connect.NewUnaryHandler(
		ServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(serviceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceDeleteHandler := connect.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(serviceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceListHandler := connect.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		connect.WithSchema(serviceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetNamespacesHandler := connect.NewUnaryHandler(
		ServiceGetNamespacesProcedure,
		svc.GetNamespaces,
		connect.WithSchema(serviceGetNamespacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetHandler := connect.NewUnaryHandler(
		ServiceGetProcedure,
		svc.Get,
		connect.WithSchema(serviceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.environment.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceUpdateProcedure:
			serviceUpdateHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceGetNamespacesProcedure:
			serviceGetNamespacesHandler.ServeHTTP(w, r)
		case ServiceGetProcedure:
			serviceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect.Request[environment.CreateRequest]) (*connect.Response[environment.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.environment.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) Update(context.Context, *connect.Request[environment.UpdateRequest]) (*connect.Response[environment.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.environment.Service.Update is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect.Request[environment.DeleteRequest]) (*connect.Response[environment.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.environment.Service.Delete is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect.Request[environment.ListRequest]) (*connect.Response[environment.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.environment.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) GetNamespaces(context.Context, *connect.Request[environment.GetNamespacesRequest]) (*connect.Response[environment.GetNamespacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.environment.Service.GetNamespaces is not implemented"))
}

func (UnimplementedServiceHandler) Get(context.Context, *connect.Request[environment.GetRequest]) (*connect.Response[environment.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.environment.Service.Get is not implemented"))
}
