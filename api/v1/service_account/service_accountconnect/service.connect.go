// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/service_account/service.proto

package service_accountconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	service_account "github.com/rigdev/rig-go-api/api/v1/service_account"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.v1.service_account.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateProcedure is the fully-qualified name of the Service's Create RPC.
	ServiceCreateProcedure = "/api.v1.service_account.Service/Create"
	// ServiceListProcedure is the fully-qualified name of the Service's List RPC.
	ServiceListProcedure = "/api.v1.service_account.Service/List"
	// ServiceDeleteProcedure is the fully-qualified name of the Service's Delete RPC.
	ServiceDeleteProcedure = "/api.v1.service_account.Service/Delete"
)

// ServiceClient is a client for the api.v1.service_account.Service service.
type ServiceClient interface {
	// Create a new Service Account. The returned client_id and client_secret can
	// be used as login credentials. Note that the client_secret can only be read
	// out once, at creation.
	Create(context.Context, *connect_go.Request[service_account.CreateRequest]) (*connect_go.Response[service_account.CreateResponse], error)
	// List all service accounts for the current project.
	List(context.Context, *connect_go.Request[service_account.ListRequest]) (*connect_go.Response[service_account.ListResponse], error)
	// Delete a service account. It can take up to the TTL of access tokens for
	// existing sessions using this service_account, to expire.
	Delete(context.Context, *connect_go.Request[service_account.DeleteRequest]) (*connect_go.Response[service_account.DeleteResponse], error)
}

// NewServiceClient constructs a client for the api.v1.service_account.Service service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		create: connect_go.NewClient[service_account.CreateRequest, service_account.CreateResponse](
			httpClient,
			baseURL+ServiceCreateProcedure,
			opts...,
		),
		list: connect_go.NewClient[service_account.ListRequest, service_account.ListResponse](
			httpClient,
			baseURL+ServiceListProcedure,
			opts...,
		),
		delete: connect_go.NewClient[service_account.DeleteRequest, service_account.DeleteResponse](
			httpClient,
			baseURL+ServiceDeleteProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	create *connect_go.Client[service_account.CreateRequest, service_account.CreateResponse]
	list   *connect_go.Client[service_account.ListRequest, service_account.ListResponse]
	delete *connect_go.Client[service_account.DeleteRequest, service_account.DeleteResponse]
}

// Create calls api.v1.service_account.Service.Create.
func (c *serviceClient) Create(ctx context.Context, req *connect_go.Request[service_account.CreateRequest]) (*connect_go.Response[service_account.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// List calls api.v1.service_account.Service.List.
func (c *serviceClient) List(ctx context.Context, req *connect_go.Request[service_account.ListRequest]) (*connect_go.Response[service_account.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls api.v1.service_account.Service.Delete.
func (c *serviceClient) Delete(ctx context.Context, req *connect_go.Request[service_account.DeleteRequest]) (*connect_go.Response[service_account.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.v1.service_account.Service service.
type ServiceHandler interface {
	// Create a new Service Account. The returned client_id and client_secret can
	// be used as login credentials. Note that the client_secret can only be read
	// out once, at creation.
	Create(context.Context, *connect_go.Request[service_account.CreateRequest]) (*connect_go.Response[service_account.CreateResponse], error)
	// List all service accounts for the current project.
	List(context.Context, *connect_go.Request[service_account.ListRequest]) (*connect_go.Response[service_account.ListResponse], error)
	// Delete a service account. It can take up to the TTL of access tokens for
	// existing sessions using this service_account, to expire.
	Delete(context.Context, *connect_go.Request[service_account.DeleteRequest]) (*connect_go.Response[service_account.DeleteResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceCreateHandler := connect_go.NewUnaryHandler(
		ServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	serviceListHandler := connect_go.NewUnaryHandler(
		ServiceListProcedure,
		svc.List,
		opts...,
	)
	serviceDeleteHandler := connect_go.NewUnaryHandler(
		ServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	return "/api.v1.service_account.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateProcedure:
			serviceCreateHandler.ServeHTTP(w, r)
		case ServiceListProcedure:
			serviceListHandler.ServeHTTP(w, r)
		case ServiceDeleteProcedure:
			serviceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) Create(context.Context, *connect_go.Request[service_account.CreateRequest]) (*connect_go.Response[service_account.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.service_account.Service.Create is not implemented"))
}

func (UnimplementedServiceHandler) List(context.Context, *connect_go.Request[service_account.ListRequest]) (*connect_go.Response[service_account.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.service_account.Service.List is not implemented"))
}

func (UnimplementedServiceHandler) Delete(context.Context, *connect_go.Request[service_account.DeleteRequest]) (*connect_go.Response[service_account.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.service_account.Service.Delete is not implemented"))
}
