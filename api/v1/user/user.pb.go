// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/v1/user/user.proto

package user

import (
	model "github.com/rigdev/rig-go-api/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of verification code
type VerificationType int32

const (
	VerificationType_VERIFICATION_TYPE_UNSPECIFIED    VerificationType = 0 // Default value
	VerificationType_VERIFICATION_TYPE_EMAIL          VerificationType = 1 // Email verification code.
	VerificationType_VERIFICATION_TYPE_TEXT           VerificationType = 2 // Deprecated: text is not supported - text verification code.
	VerificationType_VERIFICATION_TYPE_RESET_PASSWORD VerificationType = 3 // reset password verification code.
)

// Enum value maps for VerificationType.
var (
	VerificationType_name = map[int32]string{
		0: "VERIFICATION_TYPE_UNSPECIFIED",
		1: "VERIFICATION_TYPE_EMAIL",
		2: "VERIFICATION_TYPE_TEXT",
		3: "VERIFICATION_TYPE_RESET_PASSWORD",
	}
	VerificationType_value = map[string]int32{
		"VERIFICATION_TYPE_UNSPECIFIED":    0,
		"VERIFICATION_TYPE_EMAIL":          1,
		"VERIFICATION_TYPE_TEXT":           2,
		"VERIFICATION_TYPE_RESET_PASSWORD": 3,
	}
)

func (x VerificationType) Enum() *VerificationType {
	p := new(VerificationType)
	*p = x
	return p
}

func (x VerificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_user_user_proto_enumTypes[0].Descriptor()
}

func (VerificationType) Type() protoreflect.EnumType {
	return &file_api_v1_user_user_proto_enumTypes[0]
}

func (x VerificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationType.Descriptor instead.
func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{0}
}

// short-lived verification code.
type VerificationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        *model.HashingInstance `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                    // Hashed verification code.
	SentAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`                  // Timestamp when the verification code was sent.
	ExpiresAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`         // Timestamp when the verification code expires.
	Attempts    int32                  `protobuf:"varint,4,opt,name=attempts,proto3" json:"attempts,omitempty"`                           // Number of attempts to verify the code.
	LastAttempt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_attempt,json=lastAttempt,proto3" json:"last_attempt,omitempty"`   // Timestamp of the last attempt to verify the code.
	Type        VerificationType       `protobuf:"varint,6,opt,name=type,proto3,enum=api.v1.user.VerificationType" json:"type,omitempty"` // Type of verification code.
	UserId      string                 `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // User ID of the user who the code was sent to.
}

func (x *VerificationCode) Reset() {
	*x = VerificationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationCode) ProtoMessage() {}

func (x *VerificationCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationCode.ProtoReflect.Descriptor instead.
func (*VerificationCode) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *VerificationCode) GetCode() *model.HashingInstance {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *VerificationCode) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *VerificationCode) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *VerificationCode) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *VerificationCode) GetLastAttempt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttempt
	}
	return nil
}

func (x *VerificationCode) GetType() VerificationType {
	if x != nil {
		return x.Type
	}
	return VerificationType_VERIFICATION_TYPE_UNSPECIFIED
}

func (x *VerificationCode) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// User profile
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"` // First name of the user.
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`    // Last name of the user.
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// The user model.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                               // User ID of the user.
	UserInfo         *model.UserInfo        `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`                                                                         // User info of the user.
	Profile          *Profile               `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`                                                                                           // Profile of the user.
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                                      // Timestamp when the user was last updated.
	RegisterInfo     *model.RegisterInfo    `protobuf:"bytes,5,opt,name=register_info,json=registerInfo,proto3" json:"register_info,omitempty"`                                                             // Register info of the user.
	IsPhoneVerified  bool                   `protobuf:"varint,6,opt,name=is_phone_verified,json=isPhoneVerified,proto3" json:"is_phone_verified,omitempty"`                                                 // Deprecated: text is not supported - Whether the user's phone number is verified.
	IsEmailVerified  bool                   `protobuf:"varint,7,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`                                                 // Whether the user's email is verified.
	NewSessionsSince *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=new_sessions_since,json=newSessionsSince,proto3" json:"new_sessions_since,omitempty"`                                               // Timestamp when the user last created a new session.
	Metadata         map[string][]byte      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Metadata of the user.
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetUserInfo() *model.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *User) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetRegisterInfo() *model.RegisterInfo {
	if x != nil {
		return x.RegisterInfo
	}
	return nil
}

func (x *User) GetIsPhoneVerified() bool {
	if x != nil {
		return x.IsPhoneVerified
	}
	return false
}

func (x *User) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

func (x *User) GetNewSessionsSince() *timestamppb.Timestamp {
	if x != nil {
		return x.NewSessionsSince
	}
	return nil
}

func (x *User) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Update message to update a user.
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field of the user to update./
	//
	// Types that are assignable to Field:
	//
	//	*Update_Email
	//	*Update_Username
	//	*Update_PhoneNumber
	//	*Update_Password
	//	*Update_Profile
	//	*Update_IsEmailVerified
	//	*Update_IsPhoneVerified
	//	*Update_ResetSessions_
	//	*Update_SetMetadata
	//	*Update_DeleteMetadataKey
	//	*Update_HashedPassword
	Field isUpdate_Field `protobuf_oneof:"field"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{3}
}

func (m *Update) GetField() isUpdate_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Update) GetEmail() string {
	if x, ok := x.GetField().(*Update_Email); ok {
		return x.Email
	}
	return ""
}

func (x *Update) GetUsername() string {
	if x, ok := x.GetField().(*Update_Username); ok {
		return x.Username
	}
	return ""
}

func (x *Update) GetPhoneNumber() string {
	if x, ok := x.GetField().(*Update_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return ""
}

func (x *Update) GetPassword() string {
	if x, ok := x.GetField().(*Update_Password); ok {
		return x.Password
	}
	return ""
}

func (x *Update) GetProfile() *Profile {
	if x, ok := x.GetField().(*Update_Profile); ok {
		return x.Profile
	}
	return nil
}

func (x *Update) GetIsEmailVerified() bool {
	if x, ok := x.GetField().(*Update_IsEmailVerified); ok {
		return x.IsEmailVerified
	}
	return false
}

func (x *Update) GetIsPhoneVerified() bool {
	if x, ok := x.GetField().(*Update_IsPhoneVerified); ok {
		return x.IsPhoneVerified
	}
	return false
}

func (x *Update) GetResetSessions() *Update_ResetSessions {
	if x, ok := x.GetField().(*Update_ResetSessions_); ok {
		return x.ResetSessions
	}
	return nil
}

func (x *Update) GetSetMetadata() *model.Metadata {
	if x, ok := x.GetField().(*Update_SetMetadata); ok {
		return x.SetMetadata
	}
	return nil
}

func (x *Update) GetDeleteMetadataKey() string {
	if x, ok := x.GetField().(*Update_DeleteMetadataKey); ok {
		return x.DeleteMetadataKey
	}
	return ""
}

func (x *Update) GetHashedPassword() *model.HashingInstance {
	if x, ok := x.GetField().(*Update_HashedPassword); ok {
		return x.HashedPassword
	}
	return nil
}

type isUpdate_Field interface {
	isUpdate_Field()
}

type Update_Email struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3,oneof"` // Email of the user.
}

type Update_Username struct {
	Username string `protobuf:"bytes,2,opt,name=username,proto3,oneof"` // Username of the user.
}

type Update_PhoneNumber struct {
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3,oneof"` // Deprecated: text is not supported - Phone number of the user.
}

type Update_Password struct {
	Password string `protobuf:"bytes,4,opt,name=password,proto3,oneof"` // Password of the user.
}

type Update_Profile struct {
	Profile *Profile `protobuf:"bytes,5,opt,name=profile,proto3,oneof"` // Profile of the user.
}

type Update_IsEmailVerified struct {
	IsEmailVerified bool `protobuf:"varint,6,opt,name=is_email_verified,json=isEmailVerified,proto3,oneof"` // Whether the user's email is verified.
}

type Update_IsPhoneVerified struct {
	IsPhoneVerified bool `protobuf:"varint,7,opt,name=is_phone_verified,json=isPhoneVerified,proto3,oneof"` // Deprecated: text is not supported - Whether the user's phone number is verified.
}

type Update_ResetSessions_ struct {
	ResetSessions *Update_ResetSessions `protobuf:"bytes,8,opt,name=reset_sessions,json=resetSessions,proto3,oneof"` // Reset sessions of the user.
}

type Update_SetMetadata struct {
	SetMetadata *model.Metadata `protobuf:"bytes,9,opt,name=set_metadata,json=setMetadata,proto3,oneof"` // Set metadata of the user.
}

type Update_DeleteMetadataKey struct {
	DeleteMetadataKey string `protobuf:"bytes,10,opt,name=delete_metadata_key,json=deleteMetadataKey,proto3,oneof"` // Delete metadata of the user.
}

type Update_HashedPassword struct {
	HashedPassword *model.HashingInstance `protobuf:"bytes,12,opt,name=hashed_password,json=hashedPassword,proto3,oneof"` // Hashed password of the user.
}

func (*Update_Email) isUpdate_Field() {}

func (*Update_Username) isUpdate_Field() {}

func (*Update_PhoneNumber) isUpdate_Field() {}

func (*Update_Password) isUpdate_Field() {}

func (*Update_Profile) isUpdate_Field() {}

func (*Update_IsEmailVerified) isUpdate_Field() {}

func (*Update_IsPhoneVerified) isUpdate_Field() {}

func (*Update_ResetSessions_) isUpdate_Field() {}

func (*Update_SetMetadata) isUpdate_Field() {}

func (*Update_DeleteMetadataKey) isUpdate_Field() {}

func (*Update_HashedPassword) isUpdate_Field() {}

// how a user is authenticated.
type AuthMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Method:
	//
	//	*AuthMethod_LoginType
	Method isAuthMethod_Method `protobuf_oneof:"method"`
}

func (x *AuthMethod) Reset() {
	*x = AuthMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMethod) ProtoMessage() {}

func (x *AuthMethod) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMethod.ProtoReflect.Descriptor instead.
func (*AuthMethod) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{4}
}

func (m *AuthMethod) GetMethod() isAuthMethod_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *AuthMethod) GetLoginType() model.LoginType {
	if x, ok := x.GetMethod().(*AuthMethod_LoginType); ok {
		return x.LoginType
	}
	return model.LoginType(0)
}

type isAuthMethod_Method interface {
	isAuthMethod_Method()
}

type AuthMethod_LoginType struct {
	LoginType model.LoginType `protobuf:"varint,1,opt,name=login_type,json=loginType,proto3,enum=model.LoginType,oneof"` // Login type of the user.
}

func (*AuthMethod_LoginType) isAuthMethod_Method() {}

// Session entry
type SessionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Session ID of the session.
	Session   *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`                      // Session of the session.
}

func (x *SessionEntry) Reset() {
	*x = SessionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEntry) ProtoMessage() {}

func (x *SessionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEntry.ProtoReflect.Descriptor instead.
func (*SessionEntry) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{5}
}

func (x *SessionEntry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionEntry) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// A user's sessions.
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethod    *AuthMethod            `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`           // how the user is authenticated.
	IsInvalidated bool                   `protobuf:"varint,2,opt,name=is_invalidated,json=isInvalidated,proto3" json:"is_invalidated,omitempty"` // if the session is invalidated
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`              // Timestamp when the session was created.
	InvalidatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=invalidated_at,json=invalidatedAt,proto3" json:"invalidated_at,omitempty"`  // Timestamp when the session was invalidated.
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`              // Timestamp when the session expires.
	RenewedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=renewed_at,json=renewedAt,proto3" json:"renewed_at,omitempty"`              // Timestamp when the session was renewed.
	Country       string                 `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`                                   // Country of the session.
	PostalCode    int32                  `protobuf:"varint,8,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`          // Postal code of the session.
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{6}
}

func (x *Session) GetAuthMethod() *AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return nil
}

func (x *Session) GetIsInvalidated() bool {
	if x != nil {
		return x.IsInvalidated
	}
	return false
}

func (x *Session) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Session) GetInvalidatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvalidatedAt
	}
	return nil
}

func (x *Session) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Session) GetRenewedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RenewedAt
	}
	return nil
}

func (x *Session) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Session) GetPostalCode() int32 {
	if x != nil {
		return x.PostalCode
	}
	return 0
}

// if sessions are reset, all sessions will be invalidated and a new session will be created.
type Update_ResetSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Update_ResetSessions) Reset() {
	*x = Update_ResetSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_user_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update_ResetSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_ResetSessions) ProtoMessage() {}

func (x *Update_ResetSessions) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_user_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_ResetSessions.ProtoReflect.Descriptor instead.
func (*Update_ResetSessions) Descriptor() ([]byte, []int) {
	return file_api_v1_user_user_proto_rawDescGZIP(), []int{3, 0}
}

var File_api_v1_user_user_proto protoreflect.FileDescriptor

var file_api_v1_user_user_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x02, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x8e, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x04, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x0f, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x49, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x99, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x94, 0x01,
	0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x03, 0x42, 0x94, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x69, 0x67, 0x64, 0x65, 0x76, 0x2f, 0x72, 0x69, 0x67, 0x2d, 0x67, 0x6f, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0xa2,
	0x02, 0x03, 0x41, 0x56, 0x55, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x55, 0x73, 0x65,
	0x72, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x55, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_v1_user_user_proto_rawDescOnce sync.Once
	file_api_v1_user_user_proto_rawDescData = file_api_v1_user_user_proto_rawDesc
)

func file_api_v1_user_user_proto_rawDescGZIP() []byte {
	file_api_v1_user_user_proto_rawDescOnce.Do(func() {
		file_api_v1_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_user_user_proto_rawDescData)
	})
	return file_api_v1_user_user_proto_rawDescData
}

var file_api_v1_user_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_v1_user_user_proto_goTypes = []interface{}{
	(VerificationType)(0),         // 0: api.v1.user.VerificationType
	(*VerificationCode)(nil),      // 1: api.v1.user.VerificationCode
	(*Profile)(nil),               // 2: api.v1.user.Profile
	(*User)(nil),                  // 3: api.v1.user.User
	(*Update)(nil),                // 4: api.v1.user.Update
	(*AuthMethod)(nil),            // 5: api.v1.user.AuthMethod
	(*SessionEntry)(nil),          // 6: api.v1.user.SessionEntry
	(*Session)(nil),               // 7: api.v1.user.Session
	nil,                           // 8: api.v1.user.User.MetadataEntry
	(*Update_ResetSessions)(nil),  // 9: api.v1.user.Update.ResetSessions
	(*model.HashingInstance)(nil), // 10: model.HashingInstance
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*model.UserInfo)(nil),        // 12: model.UserInfo
	(*model.RegisterInfo)(nil),    // 13: model.RegisterInfo
	(*model.Metadata)(nil),        // 14: model.Metadata
	(model.LoginType)(0),          // 15: model.LoginType
}
var file_api_v1_user_user_proto_depIdxs = []int32{
	10, // 0: api.v1.user.VerificationCode.code:type_name -> model.HashingInstance
	11, // 1: api.v1.user.VerificationCode.sent_at:type_name -> google.protobuf.Timestamp
	11, // 2: api.v1.user.VerificationCode.expires_at:type_name -> google.protobuf.Timestamp
	11, // 3: api.v1.user.VerificationCode.last_attempt:type_name -> google.protobuf.Timestamp
	0,  // 4: api.v1.user.VerificationCode.type:type_name -> api.v1.user.VerificationType
	12, // 5: api.v1.user.User.user_info:type_name -> model.UserInfo
	2,  // 6: api.v1.user.User.profile:type_name -> api.v1.user.Profile
	11, // 7: api.v1.user.User.updated_at:type_name -> google.protobuf.Timestamp
	13, // 8: api.v1.user.User.register_info:type_name -> model.RegisterInfo
	11, // 9: api.v1.user.User.new_sessions_since:type_name -> google.protobuf.Timestamp
	8,  // 10: api.v1.user.User.metadata:type_name -> api.v1.user.User.MetadataEntry
	2,  // 11: api.v1.user.Update.profile:type_name -> api.v1.user.Profile
	9,  // 12: api.v1.user.Update.reset_sessions:type_name -> api.v1.user.Update.ResetSessions
	14, // 13: api.v1.user.Update.set_metadata:type_name -> model.Metadata
	10, // 14: api.v1.user.Update.hashed_password:type_name -> model.HashingInstance
	15, // 15: api.v1.user.AuthMethod.login_type:type_name -> model.LoginType
	7,  // 16: api.v1.user.SessionEntry.session:type_name -> api.v1.user.Session
	5,  // 17: api.v1.user.Session.auth_method:type_name -> api.v1.user.AuthMethod
	11, // 18: api.v1.user.Session.created_at:type_name -> google.protobuf.Timestamp
	11, // 19: api.v1.user.Session.invalidated_at:type_name -> google.protobuf.Timestamp
	11, // 20: api.v1.user.Session.expires_at:type_name -> google.protobuf.Timestamp
	11, // 21: api.v1.user.Session.renewed_at:type_name -> google.protobuf.Timestamp
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_v1_user_user_proto_init() }
func file_api_v1_user_user_proto_init() {
	if File_api_v1_user_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_user_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_user_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update_ResetSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_user_user_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Update_Email)(nil),
		(*Update_Username)(nil),
		(*Update_PhoneNumber)(nil),
		(*Update_Password)(nil),
		(*Update_Profile)(nil),
		(*Update_IsEmailVerified)(nil),
		(*Update_IsPhoneVerified)(nil),
		(*Update_ResetSessions_)(nil),
		(*Update_SetMetadata)(nil),
		(*Update_DeleteMetadataKey)(nil),
		(*Update_HashedPassword)(nil),
	}
	file_api_v1_user_user_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AuthMethod_LoginType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_user_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_user_user_proto_goTypes,
		DependencyIndexes: file_api_v1_user_user_proto_depIdxs,
		EnumInfos:         file_api_v1_user_user_proto_enumTypes,
		MessageInfos:      file_api_v1_user_user_proto_msgTypes,
	}.Build()
	File_api_v1_user_user_proto = out.File
	file_api_v1_user_user_proto_rawDesc = nil
	file_api_v1_user_user_proto_goTypes = nil
	file_api_v1_user_user_proto_depIdxs = nil
}
